[{"name": "app.py", "content": "from shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom urllib.request import urlopen\nfrom scipy import stats\nimport pandas as pd\nimport json\nimport re\n\n# declare variables\n# colours\nf1_red: str = '#E6002B'\nmain_bg_colour: str = '#111111'\ntext_colour: str = '#FFFFFF'\ntext_grey: str = '#AAAAAA'\ndefault_driver0_colour: str = f1_red # '#1b14e3'\ndefault_driver1_colour: str = text_colour\ndefault_driver_colour: str = '#ae89c4'\ntrack_border_colour: str = '#000000'\ntrack_grey: str = '#001010'\n# tracker_border_colour_driver1: str = text_colour\n\n# lists for drop down selections\nyears: list[str] = ['2023','2024']\nevents: list[str] = []\nsessions: list[str] = []\ndrivers: list[str] = []\n\n# selected from drop down selections\nselected_year: str = None\nselected_meeting_key: str = None\nselected_session_key: str = None\nselected_driver_number: list[str] = []\nselected_driver_colour: list[str] = []\n\n# telemetry data downloaded retrieved\ncar_data: list[pd.DataFrame] = []\nlocations: list[pd.DataFrame] = []\n\n\n# Shiny app layout\napp_ui: ui.page_sidebar = ui.page_sidebar(\n    ui.sidebar(\n        ui.card(\n            ui.input_selectize(\"year\",\"Year: \", choices = years, selected = '2024'),\n            ui.input_selectize(\"event\",\"Event:\", choices = [], selected = 0),\n            ui.input_selectize(\"session\",\"Session:\", choices = []),\n            ui.input_selectize('driver',\"Driver:\", choices = [], multiple = True),\n            ui.input_action_button('refresh','Refresh', class_ = 'btn-success', style = 'color:' + text_colour  + '; background:' + f1_red + 'border: 1px solid ' + text_colour),\n            height = 600,\n            style = 'color:' + text_colour + '; background:' + f1_red,\n        ),\n        ui.output_text('ack'), width = '320px',\n        bg = f1_red,\n        fg = text_colour,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height = 80, style = 'background:' + main_bg_colour)),\n        ui.column(6, ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height = 80, style = 'text-align:center; line-height:2; font-size:1.6em; font-weight:bold; color:' + text_colour + '; background:' + main_bg_colour + '; border: 1px solid ' + f1_red),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height = 80, style = 'background:' + main_bg_colour))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour,\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('track_dominance_plot'),\n        height = 250,\n    ),\n    style = 'background:' + main_bg_colour\n)\n\ndef server(input, output, session):\n    def reset_variables(\n        reset_events: bool = False,\n        reset_sessions: bool = False,\n        reset_drivers: bool = False,\n        reset_selected_year:bool = False,\n        reset_selected_meeting_key:bool = False,\n        reset_selected_session_key: bool = False,\n        reset_selected_driver_number: bool = False,\n        reset_selected_driver_colour: bool = False,\n        reset_car_data:bool = False,\n        reset_locations:bool = False\n    ):\n        global events\n        global sessions\n        global drivers\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n        \n        events = [] if reset_events else events\n        sessions = [] if reset_sessions else sessions\n        drivers = [] if reset_drivers else drivers\n\n        selected_year = None if reset_selected_year else selected_year\n        selected_meeting_key = None if reset_selected_meeting_key else selected_meeting_key\n        selected_session_key = None if reset_selected_session_key else selected_session_key\n        selected_driver_number = [] if reset_selected_driver_number else selected_driver_number\n        selected_driver_colour = [] if reset_selected_driver_colour else selected_driver_colour\n\n        car_data = [] if reset_car_data else car_data\n        locations = [] if reset_locations else locations\n\n    def get_event_name(idx: int) -> str:\n        return events.event_name[idx]\n\n    def get_driver_name(idx: int) -> str:\n        return drivers.full_name[idx]\n\n    def get_driver_name_acronym(idx: int) -> str:\n        return drivers.name_acronym[idx]\n\n    def get_driver_num(idx: int) -> str:\n        return str(drivers.driver_number[idx])\n\n    def get_session_name(idx: int) -> str:\n        return sessions.session_name[idx]\n\n    def api_call(call_type: str, filters: list[str]) -> pd.DataFrame:\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1]  ==  '?':\n                call_str  +=  f\n            else:\n                call_str  +=  '&' + f\n\n        response = urlopen(call_str)\n        df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n        assert df.shape[0] > 0 and df.shape[1] > 0, \"result pd.DataFrame is empty\"        \n        return df \n\n    def format_driver_names(driver_idx: int) -> str:\n        names = get_driver_name(driver_idx).split()\n        return '\\n'.join([names[0],' '.join(names[1:])]), get_driver_name_acronym(driver_idx)\n\n    def plot_names(front_name: str, back_name: str) -> plt.figure:\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_grey, clip_on = False, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 36, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'italic', fontfamily = 'sans-serif', fontsize = 13)\n        fig.patch.set_facecolor(main_bg_colour)\n        ax.set_facecolor(main_bg_colour)\n        ax.axis('off')\n        plt.tight_layout(pad = 0)\n        return fig\n    \n    # number = index for driver in drivers\n    def driver_metric(metric_name, idx, func, minval, maxval, display_name = None) -> plt.figure:\n        fig, ax = plt.subplots()\n\n        if len(input.driver()) > 0 and len(car_data) > idx:\n            plot_data = car_data.copy()[idx]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color = str(selected_driver_colour[idx]), height = 0.1, align = 'center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_colour, fontstyle = 'oblique',fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 14)\n\n        ax.axis('off')\n        ax.tick_params(axis = 'x', colors = text_colour, direction = 'in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor(main_bg_colour)\n        fig.patch.set_facecolor(main_bg_colour)\n        plt.tight_layout()\n\n        return fig\n\n    @reactive.effect\n    def update_event_list_with_year() -> None:\n        global events\n        global selected_year\n\n        # updatinig event drop-drop lists\n        # reset drop-down lists\n        ui.update_selectize(\"event\",choices = [])\n        ui.update_selectize(\"session\",choices = [])\n        ui.update_selectize(\"driver\",choices = [])\n\n        # reset variables for data and what are selected in drop-down lists\n        reset_variables(reset_selected_year = None, reset_selected_meeting_key = None, reset_events = True, reset_sessions = True, reset_selected_session_key = True, reset_drivers = True, reset_selected_driver_number = True, reset_selected_driver_colour = True, reset_car_data = True, reset_locations = True )\n\n        # get year from drop-down list\n        selected_year = input.year()\n\n        # get events data\n        # update event drop-down list\n        df = api_call('meetings', ['year=' + str(selected_year)])\n        assert isinstance(df, pd.DataFrame)\n        \n        try:\n            events = pd.concat([\n                df.circuit_short_name,\n                df.location,\n                df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                df.meeting_key,],axis = 1)\\\n                .rename(columns = {'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n            ui.update_selectize(\"event\",choices = events.event_name)\n        except:\n            print(f\"Likely to be data error when retrieving event data from api_call: year={str(selected_year)}. Dataframe returned has {df.shape[0]} rows and {df.shape[1]} columns\")\n\n    @reactive.effect\n    def update_session_list_with_event() -> None:\n        global sessions\n        global selected_meeting_key\n\n        # updating session drop-down list\n        # reset drop-down lists except for year and event\n        ui.update_selectize(\"driver\", choices = [])\n        ui.update_selectize(\"session\",choices = [])\n\n        # reset variables\n        reset_variables(reset_selected_meeting_key = True, reset_sessions = True, reset_selected_session_key = True, reset_drivers = True, reset_selected_driver_colour = True, reset_selected_driver_number = True, reset_car_data = True, reset_locations = True)\n\n        # check drop-down lists year and event for values\n        # get session data\n        # update session drop-drop list\n        if len(input.year()) > 0 and len(input.event()) > 0:\n            selected_meeting_key = events.meeting_key[int(input.event())]\n\n            df = api_call('sessions', ['year=' + str(selected_year),'meeting_key=' + str(selected_meeting_key)])\n            assert isinstance(df, pd.DataFrame)\n\n            try:\n                sessions = pd.concat([\n                    df.session_key,\n                    df.date_start,\n                    df.session_type,\n                    df.session_name], axis = 1)\n\n                ui.update_selectize(\"session\",choices = sessions.session_name)\n            except:\n                print(f\"Likely to be data error when retrieving session data from api_call: year={str(selected_year)}&meeting_key={str(selected_meeting_key)}. Dataframe returned has {df.shape[0]} rows and {df.shape[1]} columns\")\n\n    @reactive.effect\n    def update_driver_list_with_session() -> None:\n        global drivers\n        global selected_session_key\n\n        # updating driver drop-down list\n        # reset drop-down lists except for year, event and session\n        ui.update_selectize(\"driver\", choices = [])\n\n        # reset variables\n        reset_variables(reset_drivers = True, reset_selected_driver_number = True, reset_selected_driver_colour = True, reset_car_data = True, reset_locations = True)\n\n        if len(input.year()) > 0 and len(input.event()) and len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n\n            df = api_call('drivers', ['session_key='+str(selected_session_key)])\n            assert isinstance(df, pd.DataFrame)\n\n            try:\n                drivers = pd.concat([\n                    df.driver_number,\n                    df.name_acronym,\n                    df.full_name,\n                    df.team_name,\n                    df.team_colour,\n                    df.headshot_url,\n                    df.country_code], axis = 1)\n                drivers['team_name'] = drivers['team_name'].fillna('#NA')\n\n                ui.update_selectize(\"driver\", choices = drivers.full_name + \" (\" + drivers.team_name + \")\")\n            except:\n                print(f\"Likely to be data error when retrieving driver data from api_call: session={str(selected_session_key)}. Dataframe returned has {df.shape[0]} rows and {df.shape[1]} columns\")\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    @reactive.event(input.refresh, ignore_none = False)\n    def update_cardata_with_driver() -> None:\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        # helper functions to map speed to car x, y position on track and determine track dominance at each trck position\n        # get numerical attribute at specific time, e.g. speed\n        def get_attr_from_car_data_datetime(car_data: pd.DataFrame, time: pd._libs.tslibs.timedeltas.Timedelta, attr:str) -> float:\n            assert car_data[attr].dtypes in ['int64', 'float64']\n            \n            before = car_data.date - car_data.date.min() < time\n            after = car_data.date - car_data.date.min() >=  time\n            speed_before = -1 if len(car_data[before][attr])  ==  0 else car_data[before][attr].iloc[-1]\n            speed_after = -1 if len(car_data[after][attr])  ==  0 else car_data[after][attr].iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # Work out track dominance at specific position x, y between two cars\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        # x and y are car0 (driver0) position coordinates\n        # compare with car1's (driver1's) speed at the closest x, y position\n        def calc_dominance(x: int, y: int, speed: float) -> int:\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist  ==  loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        def get_fastest_lap(laps: pd.DataFrame) -> pd.DataFrame:\n            # shortest lap time + has a sector 3 time (finished the lap)\n            return laps[(laps.lap_duration  ==  laps.lap_duration.min()) & -laps.duration_sector_3.isna()]\n\n        def get_lap_start_time(lap: pd.DataFrame) -> str:\n            return lap.iloc[0].date_start\n\n        def get_lap_end_time(lap:pd.DataFrame) -> str:\n            lap_start = get_lap_start_time(lap)\n            lap_duration = lap.iloc[0,:].lap_duration\n            lap_end = str(pd.to_datetime(lap_start) + pd.Timedelta(seconds = lap_duration))\n            return re.sub('\\\\s', 'T', lap_end)\n\n        def map_car_data_attr_to_location_xy(location:pd.DataFrame, car_data:pd.DataFrame, attr:str) -> pd.DataFrame:\n            location[attr] = -1.0\n            for i in range(location.shape[0]):\n                time = location.iloc[i,:].date\n                location.loc[i,attr] = get_attr_from_car_data_datetime(car_data, time, 'speed')\n            return location\n\n        # smooth dominance data that are stored in locations[0] (driver0's location data\n        def smooth_dominance(smooth: int) -> None:\n            global locations\n            for i in range(locations[0].shape[0]):\n                if i + smooth < locations[0].shape[0]:\n                    locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n        # Only update if 1 or 2 drivers are chosen\n        if len(input.driver()) > 0 and len(input.driver()) <=  2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            # store previously selected drivers\n            old_selected_driver_number = selected_driver_number\n\n            # update selected driver variables\n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            # assign team colour to driver or use default colour if team/team colour is none\n            selected_driver_colour = ['#' + str(drivers.team_colour[int(d)]) if drivers.team_colour[int(d)] is not None else default_driver_colour for d in input.driver()]\n\n            # if there are more than one driver and driver/team colour assigned are the same\n            # assigned driver colours to be default driver0 and driver1 colours\n            if len(input.driver()) > 1 and (selected_driver_colour[0]  ==  selected_driver_colour[1]):\n                selected_driver_colour = [default_driver0_colour, default_driver1_colour]\n\n            # get car_data and location_data\n            temp_car_data = []\n            temp_locations = []\n            for i, d in enumerate(selected_driver_number):\n                if old_selected_driver_number == [] or selected_driver_number[i] not in old_selected_driver_number:\n                    api_result_df = api_call('laps',['session_key=' + str(selected_session_key),'driver_number=' + str(selected_driver_number[i])])\n\n                    fastest_lap = get_fastest_lap(api_result_df)\n                    fastest_lap_start = get_lap_start_time(fastest_lap)\n                    fastest_lap_end = get_lap_end_time(fastest_lap)\n\n                    car_data_df = api_call('car_data',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                    car_data_df['date'] = pd.to_datetime(car_data_df.date, format = 'mixed') - pd.to_datetime(car_data_df.date,format = 'mixed').min()\n                    temp_car_data.append(car_data_df)\n\n                    locations_df = api_call('location',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                    locations_df['date'] = pd.to_datetime(locations_df.date, format = 'mixed') - pd.to_datetime(locations_df.date,format = 'mixed').min()\n                    start_x = locations_df[locations_df.date  ==  locations_df.date.min()].x.iloc[0]\n                    start_y = locations_df[locations_df.date  ==  locations_df.date.min()].y.iloc[0]\n                    locations_df['x'] = locations_df.x - start_x\n                    locations_df['y'] = locations_df.y - start_y\n                    temp_locations.append(locations_df)\n                else:\n                    temp_car_data.append(car_data.copy()[old_selected_driver_number.index(selected_driver_number[i])])\n                    temp_locations.append(locations.copy()[old_selected_driver_number.index(selected_driver_number[i])])\n\n            car_data = temp_car_data.copy()\n            locations = temp_locations.copy()\n\n            # initialize colour attribute in locations[0] for track dominance plotting\n            # stored track dominance information only in locations[0] (driver0's location table) plotting\n            locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j] = map_car_data_attr_to_location_xy(locations[j],car_data[j], 'speed')\n                    '''locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data_datetime(car_data[j], time)'''\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed\n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth dominance result twice\n                smooth_dominance(smooth = 12)\n                smooth_dominance(smooth = 8)\n\n                # assign driver colour to locations on track to represent track dominance\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance  ==  0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance  ==  1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n\n        print(selected_meeting_key, selected_session_key)\n\n    # header elements\n    @render.text\n    def header() -> str:\n        if input.event():\n            event_name = get_event_name(int(input.event()))\n            return input.year() + ' ' + event_name if event_name !=  None else input.year()\n\n    @render.text\n    def sub_head() -> str:\n        if input.session():\n            session_name = get_session_name(int(input.session()))\n            return session_name if session_name !=  None else ''\n\n    @render.plot\n    def driver0() -> plt.figure:\n        if input.driver():\n            front_name, back_name = format_driver_names(int(input.driver()[0]))\n            return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver1() -> plt.figure:\n        if len(input.driver())  ==  2:\n            front_name, back_name = format_driver_names(int(input.driver()[1]))\n            return plot_names(front_name, back_name)\n\n    # telemetry plot\n    @render_widget\n    @reactive.event(input.refresh, ignore_none = False)\n    def tele_plot() -> go.Figure:\n        fig = go.Figure()\n\n        if input.driver() !=  '':\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace = True)\n                    data['date'] = pd.to_datetime(data.date,format = '%M:%S.%f')\n                    data.dropna(inplace = True)\n\n                    dr_mask = drivers.driver_number  ==  selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<= .[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n\n                    fig.add_trace(go.Scatter(x = data.date, y = data.speed, line = (dict(color = str(selected_driver_colour[i]))) , name = list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template = 'plotly_dark',\n            plot_bgcolor = 'black',\n            showlegend = True,\n            legend = dict(yanchor = 'bottom',y = 0.01,xanchor = 'right',x = 0.99,orientation = 'h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text = 'Speed / mph')\n        return fig\n\n    # driver metrics\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_throttle() -> plt.figure:\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_throttle() -> plt.figure:\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_brake() -> plt.figure:\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_brake() -> plt.figure:\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_topspeed() -> plt.figure:\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_topspeed() -> plt.figure:\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    # track dominance\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def track_dominance_plot() -> go.Figure:\n        global locations\n\n        fig, ax = plt.subplots()\n\n        if len(input.driver()) > 0 and len(locations) > 0:\n            plot_data = locations.copy()[0]\n\n            # draw driver0\n            ax.plot(plot_data.x + 50, plot_data.y - 250, c = text_colour, ls = '-', lw = 10, alpha = 0.15)\n            ax.plot(plot_data.x, plot_data.y, c = track_grey, ls = '-', lw = 6)\n            ax.plot(plot_data.x, plot_data.y, c = selected_driver_colour[0], ls = '-', lw = 4)\n\n            # work out segments for drawing driver1 dominant parts\n            if len(plot_data.colour.unique()) > 1:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] !=  plot_data.loc[i + 1, 'dominance']):\n                        current_segment  +=  1\n\n                # only draw driver1 dominant segments\n                plot_data_c = plot_data[plot_data.dominance  ==  1]\n                for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment  ==  seg]\n                        if plot_segment.shape[0] > 1:\n                            # ax.plot(plot_segment.x, plot_segment.y, c = tracker_border_colour_driver1, ls = '-', lw = 6)\n                            ax.plot(plot_segment.x, plot_segment.y, c = selected_driver_colour[1], ls = '-', lw = 4)\n\n            ax.plot(plot_data.x[0], plot_data.y[0], c = track_border_colour, marker = 'o', markersize = 8)\n            ax.plot(plot_data.x[0], plot_data.y[0], c = text_colour, marker = 'o', markersize = 6)\n\n        ax.axis('off')\n        ax.set_facecolor(main_bg_colour)\n\n        fig.patch.set_facecolor(main_bg_colour)\n        return fig\n    \n    @render.text\n    def ack() -> str:\n        return 'Credit to the open-sourced OpenF1.org API (https://openf1.org/) for the Formula One\u00ae telemetry data used in this dashboard'\n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "rsconnect-python/f1_telemetry.json", "content": "{\n    \"https://api.shinyapps.io\": {\n        \"server_url\": \"https://api.shinyapps.io\",\n        \"filename\": \"/Users/kalokleung/Library/CloudStorage/OneDrive-Personal/Data Science/Shiny/f1_telemetry\",\n        \"app_url\": \"https://ka-lok-leung.shinyapps.io/f1_telemetry/\",\n        \"app_id\": 11321481,\n        \"app_guid\": null,\n        \"title\": \"F1_telemetry\",\n        \"app_mode\": \"python-shiny\",\n        \"app_store_version\": 1\n    }\n}", "type": "text"}, {"name": "find_track_segments/find_track_segments.ipynb", "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 115,\n   \"id\": \"e797e606-5de7-4ae7-a1d4-d6c99b65c8f1\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from urllib.request import urlopen\\n\",\n    \"from matplotlib import pyplot as plt\\n\",\n    \"import pandas as pd\\n\",\n    \"import json\\n\",\n    \"import re\\n\",\n    \"import math\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"id\": \"f1c8e6dc-d717-4113-948b-30a750af3c74\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def api_call(call_type: str, filters: list[str]) -> pd.DataFrame:\\n\",\n    \"    call_str = 'https://api.openf1.org/v1/' + call_type + '?'\\n\",\n    \"\\n\",\n    \"    for f in filters:\\n\",\n    \"        if call_str[-1]  ==  '?':\\n\",\n    \"            call_str  +=  f\\n\",\n    \"        else:\\n\",\n    \"            call_str  +=  '&' + f\\n\",\n    \"\\n\",\n    \"    response = urlopen(call_str)\\n\",\n    \"    df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\\n\",\n    \"\\n\",\n    \"    assert df.shape[0] > 0 and df.shape[1] > 0, \\\"result pd.DataFrame is empty\\\"\\n\",\n    \"\\n\",\n    \"    return df \\n\",\n    \"\\n\",\n    \"def get_attr_from_car_data_datetime(car_data: pd.DataFrame, time: pd._libs.tslibs.timedeltas.Timedelta, attr:str) -> float:\\n\",\n    \"    assert car_data[attr].dtypes in ['int64', 'float64']\\n\",\n    \"    \\n\",\n    \"    before = car_data.date - car_data.date.min() < time\\n\",\n    \"    after = car_data.date - car_data.date.min() >=  time\\n\",\n    \"    speed_before = -1 if len(car_data[before][attr])  ==  0 else car_data[before][attr].iloc[-1]\\n\",\n    \"    speed_after = -1 if len(car_data[after][attr])  ==  0 else car_data[after][attr].iloc[0]\\n\",\n    \"    return (speed_before + speed_after) / 2\\n\",\n    \"\\n\",\n    \"def get_fastest_lap(laps: pd.DataFrame) -> pd.DataFrame:\\n\",\n    \"    # shortest lap time + has a sector 3 time (finished the lap)\\n\",\n    \"    return laps[(laps.lap_duration  ==  laps.lap_duration.min()) & -laps.duration_sector_3.isna()]\\n\",\n    \"\\n\",\n    \"def get_lap_start_time(lap: pd.DataFrame) -> str:\\n\",\n    \"    return lap.iloc[0].date_start\\n\",\n    \"\\n\",\n    \"def get_lap_end_time(lap:pd.DataFrame) -> str:\\n\",\n    \"    lap_start = get_lap_start_time(lap)\\n\",\n    \"    lap_duration = lap.iloc[0,:].lap_duration\\n\",\n    \"    lap_end = str(pd.to_datetime(lap_start) + pd.Timedelta(seconds = lap_duration))\\n\",\n    \"    return re.sub('\\\\\\\\s', 'T', lap_end)\\n\",\n    \"\\n\",\n    \"def map_car_data_attr_to_location_xy(location:pd.DataFrame, car_data:pd.DataFrame, attr:str) -> pd.DataFrame:\\n\",\n    \"    location[attr] = -1.0\\n\",\n    \"    for i in range(location.shape[0]):\\n\",\n    \"        time = location.iloc[i,:].date\\n\",\n    \"        location.loc[i,attr] = get_attr_from_car_data_datetime(car_data, time, 'speed')\\n\",\n    \"    return location\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 104,\n   \"id\": \"b4c97ca3-3f5c-4e8c-a6b1-627c3c1a6610\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"test_data = {\\n\",\n    \"    'Bahrain':{'meeting_key':'1229', 'race_session_key':'9472'},\\n\",\n    \"    'Jeddah':{'meeting_key':'1230', 'race_session_key':'9480'},\\n\",\n    \"    'Melbourne':{'meeting_key':'1231', 'race_session_key':'9481'},\\n\",\n    \"    \\n\",\n    \"}\\n\",\n    \"\\n\",\n    \"event = 'Jeddah'\\n\",\n    \"meeting_key = test_data[event]['meeting_key']\\n\",\n    \"session_key = test_data[event]['race_session_key']\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 105,\n   \"id\": \"78b14435-13d9-4143-a4c4-33a6ba5f35ce\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"laps = api_call(\\\"laps\\\", ['meeting_key='+meeting_key,'session_key='+session_key, 'driver_number=1'])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 106,\n   \"id\": \"394a1c23-0b8d-44e7-84dc-3f1abba6cb33\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"2024-03-09T18:23:11.113000 2024-03-09T18:24:42.886000\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"fastest_lap = get_fastest_lap(laps)\\n\",\n    \"\\n\",\n    \"fastest_lap_start = get_lap_start_time(fastest_lap)\\n\",\n    \"fastest_lap_end = get_lap_end_time(fastest_lap)\\n\",\n    \"\\n\",\n    \"print(fastest_lap_start, fastest_lap_end)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 107,\n   \"id\": \"40143c40-05e7-43f1-8aad-88918cabcd3a\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"car_data = api_call(\\\"car_data\\\", ['meeting_key='+meeting_key,'session_key='+session_key, 'driver_number=1','date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\\n\",\n    \"car_data['date'] = pd.to_datetime(car_data.date, format = 'mixed') - pd.to_datetime(car_data.date,format = 'mixed').min()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 108,\n   \"id\": \"5b2c32e9-4834-494c-9089-655209ddc4de\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"location = api_call(\\\"location\\\", ['meeting_key='+meeting_key,'session_key='+session_key, 'driver_number=1', 'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\\n\",\n    \"location['date'] = pd.to_datetime(location.date, format = 'mixed') - pd.to_datetime(location.date,format = 'mixed').min()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 109,\n   \"id\": \"7308844d-5a55-46ea-b394-d21433754697\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"location1 = map_car_data_attr_to_location_xy(location, car_data, 'speed')\\n\",\n    \"location1 = map_car_data_attr_to_location_xy(location, car_data, 'throttle')\\n\",\n    \"location1 = map_car_data_attr_to_location_xy(location, car_data, 'brake')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"9d033884-4276-441e-ac48-dc14b189f911\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"location1['dist'] = None\\n\",\n    \"location1['angle'] = None\\n\",\n    \"\\n\",\n    \"for i in range(location1.shape[0]):\\n\",\n    \"    if 0 < i < location1.shape[0] - 1:\\n\",\n    \"        dx = (location1.loc[i+1, 'x'] - location1.loc[i, 'x']) - (location1.loc[i, 'x'] - location1.loc[i-1, 'x'])\\n\",\n    \"        dy = (location1.loc[i+1, 'y'] - location1.loc[i, 'y']) - (location1.loc[i, 'y'] - location1.loc[i-1, 'y'])\\n\",\n    \"        print(dx, dy)\\n\",\n    \"        try:\\n\",\n    \"            location1.loc[i, 'angle'] = math.atan(dx/dy)\\n\",\n    \"        except:\\n\",\n    \"            location1.loc[i, 'angle'] = 0\\n\",\n    \"        location1.loc[i, 'dist'] = dx**2 + dy**2\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 182,\n   \"id\": \"3f645f5a-9065-44bb-9a51-158dd3f3e4c6\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\\n\",\n       \"       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n\",\n       \"       0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0,\\n\",\n       \"       1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 2, 0, 0, 3, 3, 0, 2, 2, 0, 0,\\n\",\n       \"       0, 1, 1, 0, 1, 2, 1, 0, 2, 2, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,\\n\",\n       \"       0, 2, 0, 1, 2, 2, 1, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 3, 2, 1,\\n\",\n       \"       0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\\n\",\n       \"       1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0,\\n\",\n       \"       0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,\\n\",\n       \"       0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\\n\",\n       \"       0, 0, 1, 2, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0,\\n\",\n       \"       0, 0, 0, 2, 2, 1, 0, 0, 2, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\\n\",\n       \"       0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\\n\",\n       \"       0, 2, 3, 3, 2, 2, 0, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 1, 0, 1,\\n\",\n       \"       1, 1, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,\\n\",\n       \"       0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,\\n\",\n       \"       0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)\"\n      ]\n     },\n     \"execution_count\": 182,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sklearn.cluster import KMeans\\n\",\n    \"from sklearn.preprocessing import StandardScaler\\n\",\n    \"\\n\",\n    \"#X = location1[['throttle','brake','speed','dist','angle']].iloc[1:location1.shape[0]-1,:].to_numpy()\\n\",\n    \"X = location1[['dist','angle']].iloc[1:location1.shape[0]-1,:].to_numpy()\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"scaler = StandardScaler()\\n\",\n    \"X = scaler.fit(X).transform(X)\\n\",\n    \"\\n\",\n    \"kmeans = KMeans(n_clusters=4, random_state=0, n_init=\\\"auto\\\").fit(X)\\n\",\n    \"kmeans.labels_\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 183,\n   \"id\": \"a1b19fbe-bd17-49e8-a594-972ec074aafa\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"result = location1.iloc[1:location1.shape[0]-1,:].copy()\\n\",\n    \"result['label'] = kmeans.labels_\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 184,\n   \"id\": \"2f74691b-0b5b-476e-b1fd-ac90ace740fb\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"plot_data = result.copy()\\n\",\n    \"if len(plot_data.label.unique()) > 1:\\n\",\n    \"    current_segment = 0\\n\",\n    \"    plot_data['segment'] = -1\\n\",\n    \"    for i in range(plot_data.shape[0]):\\n\",\n    \"        plot_data.loc[i, 'segment'] = current_segment\\n\",\n    \"        if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'label'] !=  plot_data.loc[i + 1, 'label']):\\n\",\n    \"            current_segment  +=  1\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 185,\n   \"id\": \"9daab13e-3e9a-4d29-aed1-0f6d2aeac3ba\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(-6086.0, 316.0, -7012.85, 23167.85)\"\n      ]\n     },\n     \"execution_count\": 185,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"fig, ax = plt.subplots()\\n\",\n    \"\\n\",\n    \"colours = ['#ff0000','#00ff00','#0000ff', '#00FFFF', '#ffff00', '#FFFF00', '#123456', '#654321']\\n\",\n    \"\\n\",\n    \"ax.plot(plot_data.x, plot_data.y, c='#eeeeee', ls='-')\\n\",\n    \"\\n\",\n    \"for s in plot_data.label.unique():\\n\",\n    \"    plot_data_seg = plot_data[plot_data.label == s]\\n\",\n    \"    for i, seg in enumerate(plot_data_seg.segment.unique()):\\n\",\n    \"        plot_segment = plot_data_seg[plot_data_seg.segment == seg]\\n\",\n    \"        if plot_segment.shape[0] > 1:\\n\",\n    \"            ax.plot(plot_segment.x, plot_segment.y, c=colours[int(s)], ls='-')\\n\",\n    \"\\n\",\n    \"ax.axis('off')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 175,\n   \"id\": \"54e7cabd-1177-46f6-8800-d6c710a60a20\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 1229 9465 # Bahrain\\n\",\n    \"# \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"f689643c-7e18-400a-aa27-90488514a3f9\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"python-3.12-kernel\",\n   \"language\": \"python\",\n   \"name\": \"python-3.12-kernel\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.2\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n", "type": "text"}, {"name": "track dominance/track_d.ipynb", "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"id\": \"5e102b36-f828-4cba-b53e-3b512895d52d\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import pandas as pd\\n\",\n    \"from scipy import stats\\n\",\n    \"from urllib.request import urlopen\\n\",\n    \"import json\\n\",\n    \"import re\\n\",\n    \"\\n\",\n    \"def api_to_df(call_type, filters):\\n\",\n    \"    call_str = 'https://api.openf1.org/v1/' + call_type + '?'\\n\",\n    \"\\n\",\n    \"    for f in filters:\\n\",\n    \"        if call_str[-1] == '?':\\n\",\n    \"            call_str += f\\n\",\n    \"        else:\\n\",\n    \"            call_str += '&' + f\\n\",\n    \"\\n\",\n    \"    response = urlopen(call_str)\\n\",\n    \"    return pd.DataFrame(json.loads(response.read().decode('utf-8')))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"id\": \"ff2fdfeb-c8e1-4b2d-9c17-3bc9d4a334cf\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"selected_driver_number = [4, 81]\\n\",\n    \"selected_session_key = 9161\\n\",\n    \"\\n\",\n    \"responses = [api_to_df('laps',['session_key='+str(selected_session_key),'driver_number='+str(d)]) for d in selected_driver_number]\\n\",\n    \"\\n\",\n    \"fastest_laps = [\\n\",\n    \"                r[(r.lap_duration == r.lap_duration.min()) &\\n\",\n    \"                  -r.duration_sector_3.isna()]\\n\",\n    \"                for r in responses]\\n\",\n    \"\\n\",\n    \"car_data = []\\n\",\n    \"locations = []\\n\",\n    \"for i in range(len(fastest_laps)):\\n\",\n    \"    fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\\n\",\n    \"    fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\\n\",\n    \"    fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\\n\",\n    \"    fastest_lap_end = re.sub('\\\\\\\\s', 'T', fastest_lap_end)\\n\",\n    \"    #print(selected_driver_number[i])\\n\",\n    \"    #response = urlopen('https://api.openf1.org/v1/car_data?driver_number='+str(selected_driver_number[i])+'&session_key='+str(selected_session_key)+'&date>'+str(fastest_lap_start)+'&date<'+str(fastest_lap_end))\\n\",\n    \"    #car_data.append(pd.DataFrame(json.loads(response.read().decode('utf-8'))))\\n\",\n    \"    car_data_df = api_to_df('car_data',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\\n\",\n    \"    car_data_df['date'] = pd.to_datetime(car_data_df.date, format='mixed') - pd.to_datetime(car_data_df.date,format='mixed').min()\\n\",\n    \"    car_data.append(car_data_df)\\n\",\n    \"\\n\",\n    \"    locations_df = api_to_df('location',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\\n\",\n    \"    locations_df['date'] = pd.to_datetime(locations_df.date, format='mixed') - pd.to_datetime(locations_df.date,format='mixed').min()\\n\",\n    \"    start_x = locations_df[locations_df.date == locations_df.date.min()].x.iloc[0]\\n\",\n    \"    start_y = locations_df[locations_df.date == locations_df.date.min()].y.iloc[0]\\n\",\n    \"    locations_df['x'] = locations_df.x - start_x\\n\",\n    \"    locations_df['y'] = locations_df.y - start_y\\n\",\n    \"    locations.append(locations_df)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"id\": \"2d106200-2712-4b94-b5fc-6692f4b1dab3\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"Index(['x', 'y', 'z', 'driver_number', 'date', 'session_key', 'meeting_key'], dtype='object')\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"locations[0].columns\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"id\": \"3ce36886-84d7-40fb-b462-82b85ebd1064\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"Index(['driver_number', 'rpm', 'speed', 'n_gear', 'throttle', 'brake', 'drs',\\n\",\n       \"       'date', 'session_key', 'meeting_key'],\\n\",\n       \"      dtype='object')\"\n      ]\n     },\n     \"execution_count\": 4,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"car_data[0].columns\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"id\": \"f71a46a7-15f1-4a76-9179-dfdb4a03725d\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def get_speed_from_car_data(car_num, time):\\n\",\n    \"    global car_data\\n\",\n    \"    before = car_data[car_num].date < time\\n\",\n    \"    after = car_data[car_num].date >= time \\n\",\n    \"    speed_before = -1 if len(car_data[car_num][before].speed) == 0 else car_data[car_num][before].speed.iloc[-1]\\n\",\n    \"    speed_after = -1 if len(car_data[car_num][after].speed) == 0 else car_data[car_num][after].speed.iloc[0]\\n\",\n    \"    #print(speed_before, speed_after)\\n\",\n    \"    return (speed_before + speed_after) / 2\\n\",\n    \"\\n\",\n    \"for j in range(len(locations)):\\n\",\n    \"    locations[j]['speed'] = -1.0\\n\",\n    \"    for i in range(locations[j].shape[0]):\\n\",\n    \"        time = locations[j].iloc[i,:].date\\n\",\n    \"        #print(pt.x, pt.y, pt.date)\\n\",\n    \"        locations[j].loc[i,'speed'] = get_speed_from_car_data(j, time)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"id\": \"9ecc4f6e-9bf3-46fd-9da7-14ba1d02035a\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# return 0 = first car is faster\\n\",\n    \"# return 1 = second car is faster\\n\",\n    \"# return -1 = same speed\\n\",\n    \"def calc_dominance(x, y, speed):\\n\",\n    \"    global locations\\n\",\n    \"    loc1 = locations[1].copy()\\n\",\n    \"    loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\\n\",\n    \"    second_car_speed = loc1[loc1.dist == loc1.dist.min()].speed.iloc[0]\\n\",\n    \"    if speed > second_car_speed:\\n\",\n    \"        return 0\\n\",\n    \"    elif speed < second_car_speed:\\n\",\n    \"        return 1\\n\",\n    \"    else:\\n\",\n    \"        return -1\\n\",\n    \"\\n\",\n    \"locations[0]['dominance'] = -99\\n\",\n    \"for i in range(locations[0].shape[0]):\\n\",\n    \"    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed \\n\",\n    \"    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\\n\",\n    \"\\n\",\n    \"smooth = 10\\n\",\n    \"for i in range(locations[0].shape[0]):\\n\",\n    \"    if i + smooth < locations[0].shape[0]:\\n\",\n    \"        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+10, 'dominance'])[0]\\n\",\n    \"\\n\",\n    \"smooth = 5\\n\",\n    \"for i in range(locations[0].shape[0]):\\n\",\n    \"    if i + smooth < locations[0].shape[0]:\\n\",\n    \"        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+10, 'dominance'])[0]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"id\": \"7731595f-8762-4c43-a680-a0f09a0de25e\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<Axes: >\"\n      ]\n     },\n     \"execution_count\": 18,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\",\n      \"text/plain\": [\n       \"<Figure size 640x480 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"locations[0].dominance.plot()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"id\": \"8a48b20a-e8aa-4a2b-b3e0-599f60bd5eb7\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>x</th>\\n\",\n       \"      <th>y</th>\\n\",\n       \"      <th>z</th>\\n\",\n       \"      <th>driver_number</th>\\n\",\n       \"      <th>date</th>\\n\",\n       \"      <th>session_key</th>\\n\",\n       \"      <th>meeting_key</th>\\n\",\n       \"      <th>speed</th>\\n\",\n       \"      <th>dominance</th>\\n\",\n       \"      <th>segment_count</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>188</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:00:00</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>134.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>-41</td>\\n\",\n       \"      <td>253</td>\\n\",\n       \"      <td>188</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:00:00.340000</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>274.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>-72</td>\\n\",\n       \"      <td>449</td>\\n\",\n       \"      <td>188</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:00:00.579000</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>277.5</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>-106</td>\\n\",\n       \"      <td>664</td>\\n\",\n       \"      <td>188</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:00:00.879000</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>281.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>-134</td>\\n\",\n       \"      <td>851</td>\\n\",\n       \"      <td>188</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:00:01.119000</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>285.5</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>336</th>\\n\",\n       \"      <td>129</td>\\n\",\n       \"      <td>-1067</td>\\n\",\n       \"      <td>189</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:01:29.779000</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>242.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>284</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>337</th>\\n\",\n       \"      <td>115</td>\\n\",\n       \"      <td>-749</td>\\n\",\n       \"      <td>189</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:01:30.079000</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>248.5</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>285</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>338</th>\\n\",\n       \"      <td>84</td>\\n\",\n       \"      <td>-506</td>\\n\",\n       \"      <td>188</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:01:30.460000</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>254.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>286</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>339</th>\\n\",\n       \"      <td>56</td>\\n\",\n       \"      <td>-335</td>\\n\",\n       \"      <td>188</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:01:30.800000</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>259.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>287</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>340</th>\\n\",\n       \"      <td>41</td>\\n\",\n       \"      <td>-245</td>\\n\",\n       \"      <td>188</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>0 days 00:01:30.960000</td>\\n\",\n       \"      <td>9161</td>\\n\",\n       \"      <td>1219</td>\\n\",\n       \"      <td>263.5</td>\\n\",\n       \"      <td>-1</td>\\n\",\n       \"      <td>288</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>341 rows \u00d7 10 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"       x     y    z  driver_number                   date  session_key  \\\\\\n\",\n       \"0      0     0  188              4        0 days 00:00:00         9161   \\n\",\n       \"1    -41   253  188              4 0 days 00:00:00.340000         9161   \\n\",\n       \"2    -72   449  188              4 0 days 00:00:00.579000         9161   \\n\",\n       \"3   -106   664  188              4 0 days 00:00:00.879000         9161   \\n\",\n       \"4   -134   851  188              4 0 days 00:00:01.119000         9161   \\n\",\n       \"..   ...   ...  ...            ...                    ...          ...   \\n\",\n       \"336  129 -1067  189              4 0 days 00:01:29.779000         9161   \\n\",\n       \"337  115  -749  189              4 0 days 00:01:30.079000         9161   \\n\",\n       \"338   84  -506  188              4 0 days 00:01:30.460000         9161   \\n\",\n       \"339   56  -335  188              4 0 days 00:01:30.800000         9161   \\n\",\n       \"340   41  -245  188              4 0 days 00:01:30.960000         9161   \\n\",\n       \"\\n\",\n       \"     meeting_key  speed  dominance  segment_count  \\n\",\n       \"0           1219  134.0          0              0  \\n\",\n       \"1           1219  274.0          0              0  \\n\",\n       \"2           1219  277.5          0              0  \\n\",\n       \"3           1219  281.0          0              0  \\n\",\n       \"4           1219  285.5          0              0  \\n\",\n       \"..           ...    ...        ...            ...  \\n\",\n       \"336         1219  242.0          1            284  \\n\",\n       \"337         1219  248.5          1            285  \\n\",\n       \"338         1219  254.0          1            286  \\n\",\n       \"339         1219  259.0          0            287  \\n\",\n       \"340         1219  263.5         -1            288  \\n\",\n       \"\\n\",\n       \"[341 rows x 10 columns]\"\n      ]\n     },\n     \"execution_count\": 19,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"locations[0]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"id\": \"927d93f0-12cd-4cfb-b1a6-de010b827e29\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[0]\\n\",\n      \"[1]\\n\",\n      \"[2]\\n\",\n      \"[3]\\n\",\n      \"[4]\\n\",\n      \"[5]\\n\",\n      \"[6]\\n\",\n      \"[7]\\n\",\n      \"[8]\\n\",\n      \"[9]\\n\",\n      \"[10]\\n\",\n      \"[11]\\n\",\n      \"[12]\\n\",\n      \"[13]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"plot_data = locations.copy()[0]\\n\",\n    \"\\n\",\n    \"current_segment = 0\\n\",\n    \"plot_data['segment'] = -1\\n\",\n    \"for i in range(plot_data.shape[0]):\\n\",\n    \"    plot_data.loc[i, 'segment'] = current_segment\\n\",\n    \"    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] != plot_data.loc[i+1, 'dominance']):\\n\",\n    \"        current_segment += 1\\n\",\n    \"\\n\",\n    \"for seg in plot_data.segment.unique():\\n\",\n    \"    print(plot_data[plot_data.segment == seg].segment.unique())\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"2b07e436-1265-4420-ae25-9d4d323163fd\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.12.2\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n", "type": "text"}, {"name": "track dominance/track_d.py", "content": "import pandas as pd\nfrom urllib.request import urlopen\nimport json\nimport re\n\ndef api_to_df(call_type, filters):\n    call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n    for f in filters:\n        if call_str[-1] == '?':\n            call_str += f\n        else:\n            call_str += '&' + f\n\n    response = urlopen(call_str)\n    return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\nresponses = [api_to_df('laps',['session_key='+str(selected_session_key),'driver_number='+str(d)]) for d in selected_driver_number]\n\nfastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n\ncar_data = []\nlocations = []\nfor i in range(len(fastest_laps)):\n    fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n    fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n    fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n    fastest_lap_end = re.sub('\\s', 'T', fastest_lap_end)\n    #print(selected_driver_number[i])\n    #response = urlopen('https://api.openf1.org/v1/car_data?driver_number='+str(selected_driver_number[i])+'&session_key='+str(selected_session_key)+'&date>'+str(fastest_lap_start)+'&date<'+str(fastest_lap_end))\n    #car_data.append(pd.DataFrame(json.loads(response.read().decode('utf-8'))))\n    car_data_df = api_to_df('car_data',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n    car_data_df['date'] = pd.to_datetime(car_data_df.date, format='mixed') - pd.to_datetime(car_data_df.date,format='mixed').min()\n    car_data.append(car_data_df)\n\n    locations_df = api_to_df('location',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n    locations_df['date'] = pd.to_datetime(locations_df.date, format='mixed') - pd.to_datetime(locations_df.date,format='mixed').min()\n    start_x = locations_df[locations_df.date == locations_df.date.min()].x.iloc[0]\n    start_y = locations_df[locations_df.date == locations_df.date.min()].y.iloc[0]\n    locations_df['x'] = locations_df.x - start_x\n    locations_df['y'] = locations_df.y - start_y\n    locations.append(locations_df)\n\n", "type": "text"}, {"name": "backup/f1_telemetry_20230331_3.py", "content": "from shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom urllib.request import urlopen\nfrom scipy import stats\nimport pandas as pd\nimport json\nimport re\n\n# declare variables\n# lists for drop down selections\nyears: list[str] = ['2023','2024']\nevents: list[str] = None\nsessions: list[str] = None\ndrivers: list[str] = None\n\n# selected from drop down selections\nselected_year: str = None\nselected_meeting_key: str = None\nselected_session_key: str = None\nselected_driver_number: list[str] = []\nselected_driver_colour: list[str] = [None, None]\n\n# telemetry data downloaded retrieved\ncar_data: list[pd.DataFrame] = []\nlocations: list[pd.DataFrame] = []\n\n# colours\nf1_red: str = '#E6002B'\nmain_bg_colour: str = '#111111'\ntext_colour: str = '#FFFFFF'\ntext_grey: str = '#AAAAAA'\ndefault_driver0_colour: str = f1_red # '#1b14e3'\ndefault_driver1_colour: str = text_colour\ndefault_driver_colour: str = '#ae89c4'\ntrack_border_colour: str = '#000000'\ntrack_grey: str = '#001010'\n# tracker_border_colour_driver1: str = text_colour\n\n# app layout\napp_ui: ui.page_sidebar = ui.page_sidebar(\n    ui.sidebar(\n        ui.card(\n            ui.input_selectize(\"year\",\"Year: \", choices = years, selected = '2024'),\n            ui.input_selectize(\"event\",\"Event:\", choices = [], selected = 0),\n            ui.input_selectize(\"session\",\"Session:\", choices = []),\n            ui.input_selectize('driver',\"Driver:\", choices = [], multiple = True),\n            ui.input_action_button('refresh','Refresh', class_ = 'btn-success', style = 'color:' + text_colour  + '; background:' + f1_red + 'border: 1px solid ' + text_colour),\n            height = 600,\n            style = 'color:' + text_colour + '; background:' + f1_red,\n        ),\n        ui.output_text('acknowledgement'), width = '320px',\n        bg = f1_red,\n        fg = text_colour,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height = 80, style = 'background:' + main_bg_colour)),\n        ui.column(6, ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height = 80, style = 'text-align:center; line-height:2; font-size:1.6em; font-weight:bold; color:' + text_colour + '; background:' + main_bg_colour + '; border: 1px solid ' + f1_red),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height = 80, style = 'background:' + main_bg_colour))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour,\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('dominance'),\n        height = 250,\n    ),\n    style = 'background:' + main_bg_colour\n)\n\n# code for app functionalities\ndef server(input, output, session):\n    def get_event_name(idx: int) -> str:\n        return events.event_name[idx]\n\n    def get_driver_name(idx: int) -> str:\n        return drivers.full_name[idx]\n\n    def get_driver_name_acronym(idx: int) -> str:\n        return drivers.name_acronym[idx]\n\n    def get_driver_num(idx: int) -> str:\n        return str(drivers.driver_number[idx])\n\n    def get_session_name(idx: int) -> str:\n        return sessions.session_name[idx]\n\n    def api_call(call_type: str, filters: list[str]) -> pd.DataFrame:\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1]  ==  '?':\n                call_str  +=  f\n            else:\n                call_str  +=  '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n    def format_driver_names(idx: int) -> str:\n        names = get_driver_name(idx).split()\n        return '\\n'.join([names[0],' '.join(names[1:])]), get_driver_name_acronym(idx)\n\n    def plot_names(front_name: str, back_name: str) -> plt.figure:\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_grey, clip_on = False, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 36, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'italic', fontfamily = 'sans-serif', fontsize = 13)\n        fig.patch.set_facecolor(main_bg_colour)\n        ax.set_facecolor(main_bg_colour)\n        ax.axis('off')\n        plt.tight_layout(pad = 0)\n        return fig\n\n    def plot_driver_metric(metric_name, idx, func, minval, maxval, display_name = None) -> plt.figure:\n        fig, ax = plt.subplots()\n\n        # plot / draw metric\n        if input.driver() !=  '' and len(car_data) > idx:\n            plot_data = car_data.copy()[idx]\n            metric = func(plot_data[[metric_name]])\n            display_name = metric_name if display_name is None else display_name\n\n            ax.barh(0.1, metric, color = str(selected_driver_colour[idx]), height = 0.1, align = 'center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 22)\n            ax.text(0, 0.3, display_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_colour, fontstyle = 'oblique',fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 14)\n\n        # format driver metric plot\n        ax.axis('off')\n        ax.tick_params(axis = 'x', colors = text_colour, direction = 'in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor(main_bg_colour)\n        fig.patch.set_facecolor(main_bg_colour)\n        plt.tight_layout()\n\n        return fig\n\n    # acknowledgement text\n    @render.text\n    def acknowledgement() -> str:\n        return 'Credit to the open-sourced OpenF1.org API (https://openf1.org/) for the Formula One\u00ae telemetry data used in this dashboard'\n\n    @reactive.effect\n    def update_event_list_with_year() -> None:\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        df = api_call('meetings', ['year=' + str(selected_year)])\n\n        if df.shape[0] > 0:\n            events = pd.concat([\n                df.circuit_short_name,\n                df.location,\n                df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                df.meeting_key,],axis = 1)\\\n                .rename(columns = {'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n            ui.update_selectize(\"event\",choices = events.event_name)\n\n        else:\n            ui.update_selectize(\"event\",choices = [])\n\n            selected_year = None\n            events = None\n            selected_meeting_key = None\n\n        ui.update_selectize(\"session\",choices = [])\n        ui.update_selectize(\"driver\",choices = [])\n\n        sessions = None\n        selected_session_key = None\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header() -> str:\n        if input.event():\n            event_name = get_event_name(int(input.event()))\n            return input.year() + ' ' + event_name if event_name !=  None else input.year()\n\n    @render.text\n    def sub_head() -> str:\n        if input.session():\n            session_name = get_session_name(int(input.session()))\n            return session_name if session_name !=  None else ''\n\n    @reactive.effect\n    def update_session_list_with_event() -> None:\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if input.year() and input.event():\n            selected_meeting_key = events.meeting_key[int(input.event())]\n\n            df = api_call('sessions', ['year=' + str(selected_year),'meeting_key=' + str(selected_meeting_key)])\n\n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis = 1)\n\n            ui.update_selectize(\"session\",choices = sessions.session_name)\n        else:\n            ui.update_selectize(\"session\",choices = [])\n\n            sessions = None\n            selected_session_key = None\n\n        ui.update_selectize(\"driver\", choices = [])\n        drivers = None\n        car_data = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session() -> None:\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n\n            response = urlopen('https://api.openf1.org/v1/drivers?session_key=' + str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis = 1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices = drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices = [])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    @render.plot\n    #@reactive.event(input.refresh, ignore_none = False)\n    def driver0() -> plt.figure:\n        if input.driver():\n            front_name, back_name = format_driver_names(int(input.driver()[0]))\n            return plot_names(front_name, back_name)\n\n    @render.plot\n    #@reactive.event(input.refresh, ignore_none = False)\n    def driver1() -> plt.figure:\n        if len(input.driver())  ==  2:\n            front_name, back_name = format_driver_names(int(input.driver()[1]))\n            return plot_names(front_name, back_name)\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    @reactive.event(input.refresh, ignore_none = False)\n    def update_cardata_with_driver() -> None:\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        if input.driver():\n            print(get_driver_num(int(input.driver()[0])), input.driver(), selected_driver_number)\n\n        # helper functions to map speed to car x, y position on track and determine which car is faster (dominant)\n        def get_speed_from_car_data(idx: int, time: pd._libs.tslibs.timedeltas.Timedelta) -> float:\n            global car_data\n            before = car_data[idx].date < time\n            after = car_data[idx].date >=  time\n            speed_before = -1 if len(car_data[idx][before].speed)  ==  0 else car_data[idx][before].speed.iloc[-1]\n            speed_after = -1 if len(car_data[idx][after].speed)  ==  0 else car_data[idx][after].speed.iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        def calc_dominance(x: int, y: int, speed: float) -> int:\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist  ==  loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        if len(input.driver()) > 0 and len(input.driver()) <=  2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            old_driver_number = selected_driver_number\n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + str(drivers.team_colour[int(d)]) if drivers.team_colour[int(d)] is not None else default_driver_colour for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if  (selected_driver_colour[0]  ==  selected_driver_colour[1]): # or (selected_driver_colour[0] is None and selected_driver_colour[1] is None)\n                    selected_driver_colour = [default_driver0_colour, default_driver1_colour]\n\n            #print(selected_driver_number, selected_driver_colour)\n\n            #responses = [urlopen('https://api.openf1.org/v1/laps?session_key = ' + str(selected_session_key) + '&driver_number = ' + str(d)) for d in selected_driver_number]\n            #responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            responses = [api_call('laps',['session_key=' + str(selected_session_key),'driver_number=' + str(d)]) for d in selected_driver_number]\n\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration  ==  r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            locations = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds = fastest_lap_duration))\n                fastest_lap_end = re.sub('\\\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n\n                car_data_df = api_call('car_data',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                car_data_df['date'] = pd.to_datetime(car_data_df.date, format = 'mixed') - pd.to_datetime(car_data_df.date,format = 'mixed').min()\n                car_data.append(car_data_df)\n\n                locations_df = api_call('location',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                locations_df['date'] = pd.to_datetime(locations_df.date, format = 'mixed') - pd.to_datetime(locations_df.date,format = 'mixed').min()\n                start_x = locations_df[locations_df.date  ==  locations_df.date.min()].x.iloc[0]\n                start_y = locations_df[locations_df.date  ==  locations_df.date.min()].y.iloc[0]\n                locations_df['x'] = locations_df.x - start_x\n                locations_df['y'] = locations_df.y - start_y\n                locations.append(locations_df)\n\n                locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        #print(pt.x, pt.y, pt.date)\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data(j, time)\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed\n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth twice\n                smooth = 12\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n                smooth = 8\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance  ==  0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance  ==  1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    @reactive.event(input.refresh, ignore_none = False)\n    def tele_plot() -> go.Figure:\n        fig = go.Figure()\n\n        if input.driver() !=  '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    #data['date'] = (pd.to_datetime(data.date, format = 'mixed') - pd.to_datetime(data.date,format = 'mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace = True)\n                    data['date'] = pd.to_datetime(data.date,format = '%M:%S.%f')\n                    data.dropna(inplace = True)\n\n                    dr_mask = drivers.driver_number  ==  selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<= .[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n\n                    fig.add_trace(go.Scatter(x = data.date, y = data.speed, line = (dict(color = str(selected_driver_colour[i]))) , name = list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template = 'plotly_dark',\n            plot_bgcolor = 'black',\n            showlegend = True,\n            legend = dict(yanchor = 'bottom',y = 0.01,xanchor = 'right',x = 0.99,orientation = 'h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text = 'Speed / mph')\n        return fig\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_throttle() -> plt.figure:\n        return plot_driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_throttle() -> plt.figure:\n        return plot_driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_brake() -> plt.figure:\n        return plot_driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_brake() -> plt.figure:\n        return plot_driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_topspeed() -> plt.figure:\n        return plot_driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_topspeed() -> plt.figure:\n        return plot_driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def dominance() -> go.Figure:\n        global locations\n\n        fig, ax = plt.subplots()\n\n        if input.driver() !=  '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n\n            # draw driver0\n            ax.plot(plot_data.x + 70, plot_data.y - 350, c = text_colour, ls = '-', lw = 10, alpha = 0.15)\n            ax.plot(plot_data.x, plot_data.y, c = track_grey, ls = '-', lw = 6)\n            ax.plot(plot_data.x, plot_data.y, c = selected_driver_colour[0], ls = '-', lw = 4)\n\n            # work out segments for drawing\n            if len(plot_data.colour.unique()) > 1:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] !=  plot_data.loc[i + 1, 'dominance']):\n                        current_segment  +=  1\n\n                # only draw driver1 dominant segments\n                plot_data_c = plot_data[plot_data.dominance  ==  1]\n                for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment  ==  seg]\n                        if plot_segment.shape[0] > 1:\n                            # ax.plot(plot_segment.x, plot_segment.y, c = tracker_border_colour_driver1, ls = '-', lw = 6)\n                            ax.plot(plot_segment.x, plot_segment.y, c = selected_driver_colour[1], ls = '-', lw = 4)\n\n            ax.plot(plot_data.x[0], plot_data.y[0], c = track_border_colour, marker = 'o', markersize = 8)\n            ax.plot(plot_data.x[0], plot_data.y[0], c = text_colour, marker = 'o', markersize = 6)\n\n        ax.axis('off')\n        ax.set_facecolor(main_bg_colour)\n\n        fig.patch.set_facecolor(main_bg_colour)\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240329.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nimport numpy as np\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\nfrom htmltools import css\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\ndisplayed_drivers = set()\n\n\nf1_red = '#E6002B'\n\ndef get_event_name(idx):\n    if idx != '':\n        return events.event_name[int(idx)]\n\ndef get_driver_name(idx):\n    if idx != '':\n        return drivers.full_name[int(idx)]\n\ndef get_driver_num(idx):\n    if idx != '':\n        return str(drivers.driver_number[int(idx)])\n\ndef get_session_name(idx):\n    if idx != '':\n        return sessions.session_name[int(idx)]\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2023'),\n        ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n        ui.input_selectize(\"session\",\"Session:\", choices=[]),\n        ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n        width = '320px',\n        bg=f1_red,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=100, style='background:#1e1e1e')),\n        ui.column(6, ui.card(ui.output_text(\"header\"),height=100, style='text-align:center; font-size:1.1em; font-weight:bold; color:#FFFFFF; background:#1e1e1e; border: 1px solid ' +f1_red)),\n        ui.column(3, ui.card(ui.output_plot(\"driver2\"),height=100, style='background:#1e1e1e'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver2_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver2_brake\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n    ),\n    style='background:#1e1e1e'\n)\n\ndef server(input, output, session):\n        \n    @reactive.effect\n    def event():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n\n        selected_year = input.year()\n\n        response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                # events['event_name'] = np.where(events.event_name.isna(), events.circuit_short_name, events.event_name)\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n                ui.update_selectize(\"session\",choices=[])\n                ui.update_selectize(\"driver\",choices=[])\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\",choices=[])\n\n            events = None\n            sessions = None\n            drivers = []\n            selected_driver_colour = []\n            selected_year = None\n            selected_meeting_key = None\n            selected_session_key = None\n            selected_driver_number = []\n            car_data = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        session_name = get_session_name(input.session())\n\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @reactive.effect\n    def session():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n\n        if input.event() != '':\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n\n        else:\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\", choices=[])\n\n            sessions = None\n            drivers = None\n            car_data = []\n            selected_driver_colour = []\n            selected_session_key = None\n            selected_driver_number = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n\n        if input.session() != '':\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n                car_data = []\n                selected_driver_number = []\n                selected_driver_colour = []\n\n    def split_driver_names(idx_list, driver1_2):\n        if len(idx_list) >= driver1_2:\n            names = get_driver_name(idx_list[driver1_2 - 1]).split()\n            return '\\n'.join(names), names[1]\n        else:\n            return 'Driver ' + str(driver1_2), str(driver1_2)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(1, 1, back_name, verticalalignment='top', horizontalalignment='right', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=32, alpha = 0.2)\n        ax.text(1, 0, front_name, verticalalignment='bottom', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#1e1e1e')\n        ax.set_facecolor('#1e1e1e')\n        ax.axis('off')\n        #plt.tight_layout(pad=0.01)\n        return fig\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = split_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver2():\n        from matplotlib import pyplot as plt\n        front_name, back_name = split_driver_names(input.driver(),2)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver1_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        global car_data\n        global displayed_drivers\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if input.driver() != '' and len(input.driver()) <= 2:\n            \n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            displayed_driver = input.driver()\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = [drivers.team_colour[int(d)] for d in input.driver()]\n\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['1b14e3','FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = 'ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = 'ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = 'ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = 'ae89c4'\n\n            print(selected_driver_number, selected_driver_colour)\n\n            responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n                response = urlopen('https://api.openf1.org/v1/car_data?driver_number='+str(selected_driver_number[i])+'&session_key='+str(selected_session_key)+'&date>'+str(fastest_lap_start)+'&date<'+str(fastest_lap_end))\n                car_data.append(pd.DataFrame(json.loads(response.read().decode('utf-8'))))\n\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            displayed_driver = set()\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color='#'+str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num):\n        from  matplotlib import pyplot as plt\n\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            mu_throttle = plot_data[[metric_name]].mean()\n            ax.barh(0.1, mu_throttle, color='#'+str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(100, 0.3, str(int(round(mu_throttle.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            ax.text(0, 0.3, metric_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        ax.spines['top'].set_visible(False)\n        ax.spines['left'].set_visible(False)\n        ax.spines['right'].set_visible(False)\n        ax.spines['bottom'].set_color('#FFFFFF')\n        ax.tick_params(axis='x', colors='#FFFFFF')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([0,100])\n        ax.set_xlim(0,100)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#1e1e1e')\n        fig.patch.set_facecolor('#1e1e1e')\n        \n        return fig\n\n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 0)\n\n    @render.plot\n    def driver2_throttle():\n        return driver_metric('throttle',1)\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake',0)\n\n    @render.plot\n    def driver2_brake():\n        return driver_metric('brake',1)\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240329_1.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nimport numpy as np\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\nfrom htmltools import css\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\ndisplayed_drivers = set()\n\n\nf1_red = '#E6002B'\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2023'),\n        ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n        ui.input_selectize(\"session\",\"Session:\", choices=[]),\n        ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n        width = '320px',\n        bg=f1_red,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=100, style='background:#1e1e1e')),\n        ui.column(6, ui.card(ui.output_text(\"header\"),height=100, style='text-align:center; font-size:1.1em; font-weight:bold; color:#FFFFFF; background:#1e1e1e; border: 1px solid ' + f1_red)),\n        ui.column(3, ui.card(ui.output_plot(\"driver2\"),height=100, style='background:#1e1e1e'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#1e1e1e;'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e',\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver2_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver2_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver2_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n    ),\n    style='background:#1e1e1e'\n)\n\ndef server(input, output, session):\n    def get_event_name(idx):\n        if idx != '':\n            return events.event_name[int(idx)]\n\n    def get_driver_name(idx):\n        if idx != '':\n            return drivers.full_name[int(idx)]\n\n    def get_driver_num(idx):\n        if idx != '':\n            return str(drivers.driver_number[int(idx)])\n\n    def get_session_name(idx):\n        if idx != '':\n            return sessions.session_name[int(idx)]\n\n    def api_to_df(call_type, filters):\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1] == '?':\n                call_str += f\n            else:\n                call_str += '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n    \n    @reactive.effect\n    def event():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year='+str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                # events['event_name'] = np.where(events.event_name.isna(), events.circuit_short_name, events.event_name)\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n                ui.update_selectize(\"session\",choices=[])\n                ui.update_selectize(\"driver\",choices=[])\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\",choices=[])\n\n            events = None\n            sessions = None\n            drivers = []\n            selected_driver_colour = []\n            selected_year = None\n            selected_meeting_key = None\n            selected_session_key = None\n            selected_driver_number = []\n            car_data = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        session_name = get_session_name(input.session())\n\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @reactive.effect\n    def session():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n\n        if input.event() != '':\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            #response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year='+str(selected_year),'meeting_key='+str(selected_meeting_key)])\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n\n        else:\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\", choices=[])\n\n            sessions = None\n            drivers = None\n            car_data = []\n            selected_driver_colour = []\n            selected_session_key = None\n            selected_driver_number = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n\n        if input.session() != '':\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n                car_data = []\n                selected_driver_number = []\n                selected_driver_colour = []\n\n    def split_driver_names(idx_list, driver1_2):\n        if len(idx_list) >= driver1_2:\n            names = get_driver_name(idx_list[driver1_2 - 1]).split()\n            return '\\n'.join(names), names[1]\n        else:\n            return 'Driver ' + str(driver1_2), str(driver1_2)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(1, 1, back_name, verticalalignment='top', horizontalalignment='right', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=32, alpha = 0.2)\n        ax.text(1, 0, front_name, verticalalignment='bottom', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#1e1e1e')\n        ax.set_facecolor('#1e1e1e')\n        ax.axis('off')\n        #plt.tight_layout(pad=0.01)\n        return fig\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = split_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver2():\n        from matplotlib import pyplot as plt\n        front_name, back_name = split_driver_names(input.driver(),2)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver1_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        global car_data\n        global displayed_drivers\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if input.driver() != '' and len(input.driver()) <= 2:\n            \n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            displayed_driver = input.driver()\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + drivers.team_colour[int(d)] for d in input.driver()]\n\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = '#ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = '#ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n\n            print(selected_driver_number, selected_driver_colour)\n\n            responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n                response = urlopen('https://api.openf1.org/v1/car_data?driver_number='+str(selected_driver_number[i])+'&session_key='+str(selected_session_key)+'&date>'+str(fastest_lap_start)+'&date<'+str(fastest_lap_end))\n                car_data.append(pd.DataFrame(json.loads(response.read().decode('utf-8'))))\n\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            displayed_driver = set()\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color=str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval):\n        from  matplotlib import pyplot as plt\n\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color=str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            ax.text(0, 0.3, metric_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        ax.spines['top'].set_visible(False)\n        ax.spines['left'].set_visible(False)\n        ax.spines['right'].set_visible(False)\n        ax.spines['bottom'].set_color('#FFFFFF')\n        ax.tick_params(axis='x', colors='#FFFFFF', direction='in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#1e1e1e')\n        fig.patch.set_facecolor('#1e1e1e')\n        plt.tight_layout()\n        \n        return fig\n\n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100)\n    \n    @render.plot\n    def driver2_throttle():\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100)\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100)\n\n    @render.plot\n    def driver2_brake():\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100)\n\n    @render.plot\n    def driver1_topspeed():\n        return driver_metric('speed', 0, pd.Series.max, 0, 350)\n\n    @render.plot\n    def driver2_topspeed():\n        return driver_metric('speed', 1, pd.Series.max, 0, 350)\n\n    \n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240329_2.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nimport numpy as np\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\ndisplayed_drivers = set()\n\ncircuit = None\n\n\nf1_red = '#E6002B'\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2023'),\n        ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n        ui.input_selectize(\"session\",\"Session:\", choices=[]),\n        ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n        width = '320px',\n        bg=f1_red,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=100, style='background:#1e1e1e')),\n        ui.column(6, ui.card(ui.output_text(\"header\"),height=100, style='text-align:center; font-size:1.1em; font-weight:bold; color:#FFFFFF; background:#1e1e1e; border: 1px solid ' + f1_red)),\n        ui.column(3, ui.card(ui.output_plot(\"driver2\"),height=100, style='background:#1e1e1e'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#1e1e1e;'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e',\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver2_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver2_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver2_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n    ),\n    style='background:#1e1e1e'\n)\n\ndef server(input, output, session):\n    def get_event_name(idx):\n        if idx != '':\n            return events.event_name[int(idx)]\n\n    def get_driver_name(idx):\n        if idx != '':\n            return drivers.full_name[int(idx)]\n\n    def get_driver_name_acronym(idx):\n        if idx != '':\n            return drivers.name_acronym[int(idx)]\n\n    def get_driver_num(idx):\n        if idx != '':\n            return str(drivers.driver_number[int(idx)])\n\n    def get_session_name(idx):\n        if idx != '':\n            return sessions.session_name[int(idx)]\n\n    def api_to_df(call_type, filters):\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1] == '?':\n                call_str += f\n            else:\n                call_str += '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n    \n    @reactive.effect\n    def update_event_list_with_year():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year='+str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                # events['event_name'] = np.where(events.event_name.isna(), events.circuit_short_name, events.event_name)\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n                ui.update_selectize(\"session\",choices=[])\n                ui.update_selectize(\"driver\",choices=[])\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\",choices=[])\n\n            selected_year = None\n            events = None\n            sessions = None\n            selected_meeting_key = None\n            selected_session_key = None\n\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        session_name = get_session_name(input.session())\n\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @reactive.effect\n    def update_session_list_with_event():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n\n        if input.event() != '':\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            #response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year='+str(selected_year),'meeting_key='+str(selected_meeting_key)])\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n\n        else:\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\", choices=[])\n\n            sessions = None\n            drivers = None\n            car_data = []\n            selected_driver_colour = []\n            selected_session_key = None\n            selected_driver_number = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n\n        if input.session() != '':\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n                car_data = []\n                selected_driver_number = []\n                selected_driver_colour = []\n\n    def format_driver_names(idx_list, driver1_2):\n        if len(idx_list) >= driver1_2:\n            names = get_driver_name(idx_list[driver1_2 - 1]).split()\n            return '\\n'.join(names), get_driver_name_acronym(idx_list[driver1_2-1])\n        else:\n            return 'Driver ' + str(driver1_2), str(driver1_2)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment='top', horizontalalignment='left', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=48, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#1e1e1e')\n        ax.set_facecolor('#1e1e1e')\n        ax.axis('off')\n        #plt.tight_layout(pad=0.01)\n        return fig\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver2():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),2)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver1_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        global car_data\n        global displayed_drivers\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if input.driver() != '' and len(input.driver()) <= 2:\n            \n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            displayed_driver = input.driver()\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + drivers.team_colour[int(d)] for d in input.driver()]\n\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = '#ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = '#ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n\n            print(selected_driver_number, selected_driver_colour)\n\n            responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n                response = urlopen('https://api.openf1.org/v1/car_data?driver_number='+str(selected_driver_number[i])+'&session_key='+str(selected_session_key)+'&date>'+str(fastest_lap_start)+'&date<'+str(fastest_lap_end))\n                car_data.append(pd.DataFrame(json.loads(response.read().decode('utf-8'))))\n\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            displayed_driver = set()\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color=str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval):\n        from  matplotlib import pyplot as plt\n\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color=str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            ax.text(0, 0.3, metric_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        #ax.spines['top'].set_visible(False)\n        #ax.spines['left'].set_visible(False)\n        #ax.spines['right'].set_visible(False)\n        #ax.spines['bottom'].set_color('#FFFFFF')\n        ax.axis('off')\n        ax.tick_params(axis='x', colors='#FFFFFF', direction='in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#1e1e1e')\n        fig.patch.set_facecolor('#1e1e1e')\n        plt.tight_layout()\n        \n        return fig\n\n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100)\n    \n    @render.plot\n    def driver2_throttle():\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100)\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100)\n\n    @render.plot\n    def driver2_brake():\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100)\n\n    @render.plot\n    def driver1_topspeed():\n        return driver_metric('speed', 0, pd.Series.max, 0, 350)\n\n    @render.plot\n    def driver2_topspeed():\n        return driver_metric('speed', 1, pd.Series.max, 0, 350)\n\n    \n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240329_3.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nimport numpy as np\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\ndisplayed_drivers = set()\n\ncircuit = None\n\n\nf1_red = '#E6002B'\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2023'),\n        ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n        ui.input_selectize(\"session\",\"Session:\", choices=[]),\n        ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n        width = '320px',\n        bg=f1_red,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=100, style='background:#1e1e1e')),\n        ui.column(6, ui.card(ui.output_text(\"header\"),height=100, style='text-align:center; font-size:1.1em; font-weight:bold; color:#FFFFFF; background:#1e1e1e; border: 1px solid ' + f1_red)),\n        ui.column(3, ui.card(ui.output_plot(\"driver2\"),height=100, style='background:#1e1e1e'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#1e1e1e;'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e',\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver2_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver2_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver2_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n    ),\n    style='background:#1e1e1e'\n)\n\ndef server(input, output, session):\n    def get_event_name(idx):\n        if idx != '':\n            return events.event_name[int(idx)]\n\n    def get_driver_name(idx):\n        if idx != '':\n            return drivers.full_name[int(idx)]\n\n    def get_driver_name_acronym(idx):\n        if idx != '':\n            return drivers.name_acronym[int(idx)]\n\n    def get_driver_num(idx):\n        if idx != '':\n            return str(drivers.driver_number[int(idx)])\n\n    def get_session_name(idx):\n        if idx != '':\n            return sessions.session_name[int(idx)]\n\n    def api_to_df(call_type, filters):\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1] == '?':\n                call_str += f\n            else:\n                call_str += '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n    \n    @reactive.effect\n    def update_event_list_with_year():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year='+str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                # events['event_name'] = np.where(events.event_name.isna(), events.circuit_short_name, events.event_name)\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n                ui.update_selectize(\"session\",choices=[])\n                ui.update_selectize(\"driver\",choices=[])\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\",choices=[])\n\n            selected_year = None\n            events = None\n            sessions = None\n            selected_meeting_key = None\n            selected_session_key = None\n\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        session_name = get_session_name(input.session())\n\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @reactive.effect\n    def update_session_list_with_event():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n\n        if input.event() != '':\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            #response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year='+str(selected_year),'meeting_key='+str(selected_meeting_key)])\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n\n        else:\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\", choices=[])\n\n            sessions = None\n            drivers = None\n            car_data = []\n            selected_driver_colour = []\n            selected_session_key = None\n            selected_driver_number = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n\n        if input.session() != '':\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n                car_data = []\n                selected_driver_number = []\n                selected_driver_colour = []\n\n    def format_driver_names(idx_list, driver1_2):\n        if len(idx_list) >= driver1_2:\n            names = get_driver_name(idx_list[driver1_2 - 1]).split()\n            return '\\n'.join(names), get_driver_name_acronym(idx_list[driver1_2-1])\n        else:\n            return 'Driver ' + str(driver1_2), str(driver1_2)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment='top', horizontalalignment='left', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=48, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#1e1e1e')\n        ax.set_facecolor('#1e1e1e')\n        ax.axis('off')\n        #plt.tight_layout(pad=0.01)\n        return fig\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver2():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),2)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver1_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        global car_data\n        global displayed_drivers\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if input.driver() != '' and len(input.driver()) <= 2:\n            \n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            displayed_driver = input.driver()\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + drivers.team_colour[int(d)] if drivers.team_colour[int(d)] is not None else '#ae89c4' for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                elif selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour = [f1_red, '#FFFFFF']\n            '''\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = '#ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = '#ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n            '''\n                            \n\n            print(selected_driver_number, selected_driver_colour)\n\n            #responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            #responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            responses = [api_to_df('laps',['session_key='+str(selected_session_key),'driver_number='+str(d)]) for d in selected_driver_number]\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n                response = urlopen('https://api.openf1.org/v1/car_data?driver_number='+str(selected_driver_number[i])+'&session_key='+str(selected_session_key)+'&date>'+str(fastest_lap_start)+'&date<'+str(fastest_lap_end))\n                car_data.append(pd.DataFrame(json.loads(response.read().decode('utf-8'))))\n\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            displayed_driver = set()\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color=str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval):\n        from  matplotlib import pyplot as plt\n\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color=str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            ax.text(0, 0.3, metric_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        #ax.spines['top'].set_visible(False)\n        #ax.spines['left'].set_visible(False)\n        #ax.spines['right'].set_visible(False)\n        #ax.spines['bottom'].set_color('#FFFFFF')\n        ax.axis('off')\n        ax.tick_params(axis='x', colors='#FFFFFF', direction='in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#1e1e1e')\n        fig.patch.set_facecolor('#1e1e1e')\n        plt.tight_layout()\n        \n        return fig\n\n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100)\n    \n    @render.plot\n    def driver2_throttle():\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100)\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100)\n\n    @render.plot\n    def driver2_brake():\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100)\n\n    @render.plot\n    def driver1_topspeed():\n        return driver_metric('speed', 0, pd.Series.max, 0, 350)\n\n    @render.plot\n    def driver2_topspeed():\n        return driver_metric('speed', 1, pd.Series.max, 0, 350)\n\n    \n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240329_4.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nimport numpy as np\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\n\nlocations = []\n\n\nf1_red = '#E6002B'\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2023'),\n        ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n        ui.input_selectize(\"session\",\"Session:\", choices=[]),\n        ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n        width = '320px',\n        bg=f1_red,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=100, style='background:#1e1e1e')),\n        ui.column(6, ui.card(ui.output_text(\"header\"),height=100, style='text-align:center; font-size:1.1em; font-weight:bold; color:#FFFFFF; background:#1e1e1e; border: 1px solid ' + f1_red)),\n        ui.column(3, ui.card(ui.output_plot(\"driver2\"),height=100, style='background:#1e1e1e'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#1e1e1e;'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e',\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver2_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver2_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver2_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('dominance'),\n    ),\n    style='background:#1e1e1e'\n)\n\ndef server(input, output, session):\n    def get_event_name(idx):\n        if idx != '':\n            return events.event_name[int(idx)]\n\n    def get_driver_name(idx):\n        if idx != '':\n            return drivers.full_name[int(idx)]\n\n    def get_driver_name_acronym(idx):\n        if idx != '':\n            return drivers.name_acronym[int(idx)]\n\n    def get_driver_num(idx):\n        if idx != '':\n            return str(drivers.driver_number[int(idx)])\n\n    def get_session_name(idx):\n        if idx != '':\n            return sessions.session_name[int(idx)]\n\n    def api_to_df(call_type, filters):\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1] == '?':\n                call_str += f\n            else:\n                call_str += '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n    \n    @reactive.effect\n    def update_event_list_with_year():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year='+str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                # events['event_name'] = np.where(events.event_name.isna(), events.circuit_short_name, events.event_name)\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n                ui.update_selectize(\"session\",choices=[])\n                ui.update_selectize(\"driver\",choices=[])\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\",choices=[])\n\n            selected_year = None\n            events = None\n            sessions = None\n            selected_meeting_key = None\n            selected_session_key = None\n\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        session_name = get_session_name(input.session())\n\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @reactive.effect\n    def update_session_list_with_event():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if input.event() != '':\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            #response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year='+str(selected_year),'meeting_key='+str(selected_meeting_key)])\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n\n        else:\n            ui.update_selectize(\"session\",choices=[])\n            ui.update_selectize(\"driver\", choices=[])\n\n            sessions = None\n            selected_session_key = None\n\n        drivers = None\n        car_data = []\n        selected_driver_colour = []            \n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if input.session() != '':\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    def format_driver_names(idx_list, driver1_2):\n        if len(idx_list) >= driver1_2:\n            names = get_driver_name(idx_list[driver1_2 - 1]).split()\n            return '\\n'.join(names), get_driver_name_acronym(idx_list[driver1_2-1])\n        else:\n            return 'Driver ' + str(driver1_2), str(driver1_2)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment='top', horizontalalignment='left', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=48, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#1e1e1e')\n        ax.set_facecolor('#1e1e1e')\n        ax.axis('off')\n        #plt.tight_layout(pad=0.01)\n        return fig\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver2():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),2)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver1_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if input.driver() != '' and len(input.driver()) <= 2:\n            \n            fastest_lap_start = None\n            fastest_lap_end = None\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + drivers.team_colour[int(d)] if drivers.team_colour[int(d)] is not None else '#ae89c4' for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                elif selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour = [f1_red, '#FFFFFF']\n            '''\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = '#ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = '#ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n            '''\n                            \n\n            #print(selected_driver_number, selected_driver_colour)\n\n            #responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            #responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            responses = [api_to_df('laps',['session_key='+str(selected_session_key),'driver_number='+str(d)]) for d in selected_driver_number]\n\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            location = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n                #response = urlopen('https://api.openf1.org/v1/car_data?driver_number='+str(selected_driver_number[i])+'&session_key='+str(selected_session_key)+'&date>'+str(fastest_lap_start)+'&date<'+str(fastest_lap_end))\n                #car_data.append(pd.DataFrame(json.loads(response.read().decode('utf-8'))))\n                car_data.append(api_to_df('car_data',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)]))\n                locations.append(api_to_df('location',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)]))\n                \n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color=str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval, display_name = None):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color=str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        #ax.spines['top'].set_visible(False)\n        #ax.spines['left'].set_visible(False)\n        #ax.spines['right'].set_visible(False)\n        #ax.spines['bottom'].set_color('#FFFFFF')\n        ax.axis('off')\n        ax.tick_params(axis='x', colors='#FFFFFF', direction='in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#1e1e1e')\n        fig.patch.set_facecolor('#1e1e1e')\n        plt.tight_layout()\n        \n        return fig\n\n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n    \n    @render.plot\n    def driver2_throttle():\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver2_brake():\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver1_topspeed():\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def driver2_topspeed():\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def dominance():\n        global locations\n        \n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n            ax.scatter(plot_data.x, plot_data.y)\n\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240329_5.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nimport numpy as np\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\n\nlocations = []\n\n\nf1_red = '#E6002B'\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2023'),\n        ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n        ui.input_selectize(\"session\",\"Session:\", choices=[]),\n        ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n        width = '320px',\n        bg=f1_red,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height=100, style='background:#1e1e1e')),\n        ui.column(6, ui.card(ui.output_text(\"header\"),height=100, style='text-align:center; font-size:1.1em; font-weight:bold; color:#FFFFFF; background:#1e1e1e; border: 1px solid ' + f1_red)),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=100, style='background:#1e1e1e'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height=100, style='background:#1e1e1e;'),\n                ui.card(ui.output_plot(\"driver0_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e',\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('dominance'),\n    ),\n    style='background:#1e1e1e'\n)\n\ndef server(input, output, session):\n    def get_event_name(idx):\n        if idx != '':\n            return events.event_name[int(idx)]\n\n    def get_driver_name(idx):\n        if idx != '':\n            return drivers.full_name[int(idx)]\n\n    def get_driver_name_acronym(idx):\n        if idx != '':\n            return drivers.name_acronym[int(idx)]\n\n    def get_driver_num(idx):\n        if idx != '':\n            return str(drivers.driver_number[int(idx)])\n\n    def get_session_name(idx):\n        if idx != '':\n            return sessions.session_name[int(idx)]\n\n    def api_to_df(call_type, filters):\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1] == '?':\n                call_str += f\n            else:\n                call_str += '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n    \n    @reactive.effect\n    def update_event_list_with_year():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year='+str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                # events['event_name'] = np.where(events.event_name.isna(), events.circuit_short_name, events.event_name)\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            \n            selected_year = None\n            events = None\n            selected_meeting_key = None\n\n        ui.update_selectize(\"session\",choices=[])\n        ui.update_selectize(\"driver\",choices=[])\n        \n        sessions = None\n        selected_session_key = None\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        session_name = get_session_name(input.session())\n\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @reactive.effect\n    def update_session_list_with_event():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if len(input.event()) > 0:\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            #response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year='+str(selected_year),'meeting_key='+str(selected_meeting_key)])\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n        else:\n            ui.update_selectize(\"session\",choices=[])\n\n            sessions = None\n            selected_session_key = None\n\n        ui.update_selectize(\"driver\", choices=[])\n        drivers = None\n        car_data = []\n        selected_driver_colour = []            \n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    def format_driver_names(idx_list, driver0_or_1):\n        if len(idx_list) > driver0_or_1:\n            names = get_driver_name(idx_list[driver0_or_1]).split()\n            return '\\n'.join(names), get_driver_name_acronym(idx_list[driver0_or_1])\n        else:\n            return 'Driver ' + str(driver0_or_1 + 1), str(driver0_or_1 + 1)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment='top', horizontalalignment='left', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=48, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#1e1e1e')\n        ax.set_facecolor('#1e1e1e')\n        ax.axis('off')\n        #plt.tight_layout(pad=0.01)\n        return fig\n\n    @render.plot\n    def driver0():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),0)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver0_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if len(input.driver()) > 0 and len(input.driver()) <= 2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + drivers.team_colour[int(d)] if drivers.team_colour[int(d)] is not None else '#ae89c4' for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                elif selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour = [f1_red, '#FFFFFF']\n            '''\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = '#ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = '#ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n            '''\n                            \n\n            #print(selected_driver_number, selected_driver_colour)\n\n            #responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            #responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            responses = [api_to_df('laps',['session_key='+str(selected_session_key),'driver_number='+str(d)]) for d in selected_driver_number]\n\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            locations = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n                #response = urlopen('https://api.openf1.org/v1/car_data?driver_number='+str(selected_driver_number[i])+'&session_key='+str(selected_session_key)+'&date>'+str(fastest_lap_start)+'&date<'+str(fastest_lap_end))\n                #car_data.append(pd.DataFrame(json.loads(response.read().decode('utf-8'))))\n                car_data_df = api_to_df('car_data',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                car_data_df['date'] = pd.to_datetime(car_data_df.date, format='mixed') - pd.to_datetime(car_data_df.date,format='mixed').min()\n                car_data.append(car_data_df)\n\n                locations_df = api_to_df('location',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                locations_df['date'] = pd.to_datetime(locations_df.date, format='mixed') - pd.to_datetime(locations_df.date,format='mixed').min()\n                start_x = locations_df[locations_df.date == locations_df.date.min()].x.iloc[0]\n                start_y = locations_df[locations_df.date == locations_df.date.min()].y.iloc[0]\n                locations_df['x'] = locations_df.x - start_x\n                locations_df['y'] = locations_df.y - start_y\n                locations.append(locations_df)\n\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    #data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color=str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval, display_name = None):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color=str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        #ax.spines['top'].set_visible(False)\n        #ax.spines['left'].set_visible(False)\n        #ax.spines['right'].set_visible(False)\n        #ax.spines['bottom'].set_color('#FFFFFF')\n        ax.axis('off')\n        ax.tick_params(axis='x', colors='#FFFFFF', direction='in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#1e1e1e')\n        fig.patch.set_facecolor('#1e1e1e')\n        plt.tight_layout()\n        \n        return fig\n\n    @render.plot\n    def driver0_throttle():\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n    \n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    def driver0_brake():\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver0_topspeed():\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def driver1_topspeed():\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def dominance():\n        global locations\n        \n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n            ax.scatter(plot_data.x, plot_data.y)\n\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240329_6.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nfrom scipy import stats\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\n\nlocations = []\n\n\nf1_red = '#E6002B'\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2023'),\n        ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n        ui.input_selectize(\"session\",\"Session:\", choices=[]),\n        ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n        width = '320px',\n        bg=f1_red,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height=100, style='background:#1e1e1e')),\n        ui.column(6, ui.card(ui.output_text(\"header\"),height=100, style='text-align:center; font-size:1.1em; font-weight:bold; color:#FFFFFF; background:#1e1e1e; border: 1px solid ' + f1_red)),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=100, style='background:#1e1e1e'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height=100, style='background:#1e1e1e;'),\n                ui.card(ui.output_plot(\"driver0_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e',\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('dominance'),\n    ),\n    style='background:#1e1e1e'\n)\n\ndef server(input, output, session):\n    def get_event_name(idx):\n        if idx != '':\n            return events.event_name[int(idx)]\n\n    def get_driver_name(idx):\n        if idx != '':\n            return drivers.full_name[int(idx)]\n\n    def get_driver_name_acronym(idx):\n        if idx != '':\n            return drivers.name_acronym[int(idx)]\n\n    def get_driver_num(idx):\n        if idx != '':\n            return str(drivers.driver_number[int(idx)])\n\n    def get_session_name(idx):\n        if idx != '':\n            return sessions.session_name[int(idx)]\n\n    def api_to_df(call_type, filters):\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1] == '?':\n                call_str += f\n            else:\n                call_str += '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n    \n    @reactive.effect\n    def update_event_list_with_year():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year='+str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            \n            selected_year = None\n            events = None\n            selected_meeting_key = None\n\n        ui.update_selectize(\"session\",choices=[])\n        ui.update_selectize(\"driver\",choices=[])\n        \n        sessions = None\n        selected_session_key = None\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        session_name = get_session_name(input.session())\n\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @reactive.effect\n    def update_session_list_with_event():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if len(input.event()) > 0:\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            #response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year='+str(selected_year),'meeting_key='+str(selected_meeting_key)])\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n        else:\n            ui.update_selectize(\"session\",choices=[])\n\n            sessions = None\n            selected_session_key = None\n\n        ui.update_selectize(\"driver\", choices=[])\n        drivers = None\n        car_data = []\n        selected_driver_colour = []            \n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    def format_driver_names(idx_list, driver0_or_1):\n        if len(idx_list) > driver0_or_1:\n            names = get_driver_name(idx_list[driver0_or_1]).split()\n            return '\\n'.join(names), get_driver_name_acronym(idx_list[driver0_or_1])\n        else:\n            return 'Driver ' + str(driver0_or_1 + 1), str(driver0_or_1 + 1)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment='top', horizontalalignment='left', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=48, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#1e1e1e')\n        ax.set_facecolor('#1e1e1e')\n        ax.axis('off')\n        #plt.tight_layout(pad=0.01)\n        return fig\n\n    @render.plot\n    def driver0():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),0)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver0_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        # helper functions to map speed to car x, y position on track and determine which car is faster (dominant)\n        def get_speed_from_car_data(car_num, time):\n            global car_data\n            before = car_data[car_num].date < time\n            after = car_data[car_num].date >= time \n            speed_before = -1 if len(car_data[car_num][before].speed) == 0 else car_data[car_num][before].speed.iloc[-1]\n            speed_after = -1 if len(car_data[car_num][after].speed) == 0 else car_data[car_num][after].speed.iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        def calc_dominance(x, y, speed):\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist == loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if len(input.driver()) > 0 and len(input.driver()) <= 2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + drivers.team_colour[int(d)] if drivers.team_colour[int(d)] is not None else '#ae89c4' for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                elif selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour = [f1_red, '#FFFFFF']\n            '''\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = '#ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = '#ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n            '''\n                            \n\n            #print(selected_driver_number, selected_driver_colour)\n\n            #responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            #responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            responses = [api_to_df('laps',['session_key='+str(selected_session_key),'driver_number='+str(d)]) for d in selected_driver_number]\n\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            locations = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n\n                car_data_df = api_to_df('car_data',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                car_data_df['date'] = pd.to_datetime(car_data_df.date, format='mixed') - pd.to_datetime(car_data_df.date,format='mixed').min()\n                car_data.append(car_data_df)\n\n                locations_df = api_to_df('location',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                locations_df['date'] = pd.to_datetime(locations_df.date, format='mixed') - pd.to_datetime(locations_df.date,format='mixed').min()\n                start_x = locations_df[locations_df.date == locations_df.date.min()].x.iloc[0]\n                start_y = locations_df[locations_df.date == locations_df.date.min()].y.iloc[0]\n                locations_df['x'] = locations_df.x - start_x\n                locations_df['y'] = locations_df.y - start_y\n                locations.append(locations_df)\n\n                locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        #print(pt.x, pt.y, pt.date)\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data(0, time)\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed \n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth twice\n                smooth = 10\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+10, 'dominance'])[0]\n\n                smooth = 5\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+10, 'dominance'])[0]\n\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance == 0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance == 1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    #data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color=str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval, display_name = None):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color=str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        #ax.spines['top'].set_visible(False)\n        #ax.spines['left'].set_visible(False)\n        #ax.spines['right'].set_visible(False)\n        #ax.spines['bottom'].set_color('#FFFFFF')\n        ax.axis('off')\n        ax.tick_params(axis='x', colors='#FFFFFF', direction='in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#1e1e1e')\n        fig.patch.set_facecolor('#1e1e1e')\n        plt.tight_layout()\n        \n        return fig\n\n    @render.plot\n    def driver0_throttle():\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n    \n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    def driver0_brake():\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver0_topspeed():\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def driver1_topspeed():\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def dominance():\n        global locations\n        \n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n            ax.scatter(plot_data.x, plot_data.y, c=plot_data.colour)\n            ax.axis('off')\n\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240330_1.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nfrom scipy import stats\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\n\nlocations = []\n\n\nf1_red = '#E6002B'\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2024'),\n        ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n        ui.input_selectize(\"session\",\"Session:\", choices=[]),\n        ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n        width = '320px',\n        bg=f1_red,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height=100, style='background:#1e1e1e')),\n        ui.column(6, ui.card(ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height=100, style='text-align:center; font-size:1.1em; font-weight:bold; color:#FFFFFF; background:#1e1e1e; border: 1px solid ' + f1_red)),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=100, style='background:#1e1e1e'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height=100, style='background:#1e1e1e;'),\n                ui.card(ui.output_plot(\"driver0_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e',\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('dominance'),\n        height = 250,\n    ),\n    style='background:#1e1e1e'\n)\n\ndef server(input, output, session):\n    def get_event_name(idx):\n        if idx != '':\n            return events.event_name[int(idx)]\n\n    def get_driver_name(idx):\n        if idx != '':\n            return drivers.full_name[int(idx)]\n\n    def get_driver_name_acronym(idx):\n        if idx != '':\n            return drivers.name_acronym[int(idx)]\n\n    def get_driver_num(idx):\n        if idx != '':\n            return str(drivers.driver_number[int(idx)])\n\n    def get_session_name(idx):\n        if idx != '':\n            return sessions.session_name[int(idx)]\n\n    def api_to_df(call_type, filters):\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1] == '?':\n                call_str += f\n            else:\n                call_str += '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n    \n    @reactive.effect\n    def update_event_list_with_year():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year='+str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            \n            selected_year = None\n            events = None\n            selected_meeting_key = None\n\n        ui.update_selectize(\"session\",choices=[])\n        ui.update_selectize(\"driver\",choices=[])\n        \n        sessions = None\n        selected_session_key = None\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @render.text\n    def sub_head():\n        session_name = get_session_name(input.session())\n        return session_name if session_name != None else ''\n\n    @reactive.effect\n    def update_session_list_with_event():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if len(input.event()) > 0:\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            #response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year='+str(selected_year),'meeting_key='+str(selected_meeting_key)])\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n        else:\n            ui.update_selectize(\"session\",choices=[])\n\n            sessions = None\n            selected_session_key = None\n\n        ui.update_selectize(\"driver\", choices=[])\n        drivers = None\n        car_data = []\n        selected_driver_colour = []            \n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    def format_driver_names(idx_list, driver0_or_1):\n        if len(idx_list) > driver0_or_1:\n            names = get_driver_name(idx_list[driver0_or_1]).split()\n            return '\\n'.join(names), get_driver_name_acronym(idx_list[driver0_or_1])\n        else:\n            return 'Driver ' + str(driver0_or_1 + 1), str(driver0_or_1 + 1)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment='top', horizontalalignment='left', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=48, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#1e1e1e')\n        ax.set_facecolor('#1e1e1e')\n        ax.axis('off')\n        #plt.tight_layout(pad=0.01)\n        return fig\n\n    @render.plot\n    def driver0():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),0)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver0_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        # helper functions to map speed to car x, y position on track and determine which car is faster (dominant)\n        def get_speed_from_car_data(car_num, time):\n            global car_data\n            before = car_data[car_num].date < time\n            after = car_data[car_num].date >= time \n            speed_before = -1 if len(car_data[car_num][before].speed) == 0 else car_data[car_num][before].speed.iloc[-1]\n            speed_after = -1 if len(car_data[car_num][after].speed) == 0 else car_data[car_num][after].speed.iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        def calc_dominance(x, y, speed):\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist == loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if len(input.driver()) > 0 and len(input.driver()) <= 2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + drivers.team_colour[int(d)] if drivers.team_colour[int(d)] is not None else '#ae89c4' for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                elif selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour = [f1_red, '#FFFFFF']\n            '''\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = '#ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = '#ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n            '''\n                            \n\n            #print(selected_driver_number, selected_driver_colour)\n\n            #responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            #responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            responses = [api_to_df('laps',['session_key='+str(selected_session_key),'driver_number='+str(d)]) for d in selected_driver_number]\n\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            locations = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n\n                car_data_df = api_to_df('car_data',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                car_data_df['date'] = pd.to_datetime(car_data_df.date, format='mixed') - pd.to_datetime(car_data_df.date,format='mixed').min()\n                car_data.append(car_data_df)\n\n                locations_df = api_to_df('location',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                locations_df['date'] = pd.to_datetime(locations_df.date, format='mixed') - pd.to_datetime(locations_df.date,format='mixed').min()\n                start_x = locations_df[locations_df.date == locations_df.date.min()].x.iloc[0]\n                start_y = locations_df[locations_df.date == locations_df.date.min()].y.iloc[0]\n                locations_df['x'] = locations_df.x - start_x\n                locations_df['y'] = locations_df.y - start_y\n                locations.append(locations_df)\n\n                locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        #print(pt.x, pt.y, pt.date)\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data(j, time)\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed \n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth twice\n                smooth = 10\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+10, 'dominance'])[0]\n\n                smooth = 5\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+10, 'dominance'])[0]\n\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance == 0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance == 1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    #data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color=str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text='Speed / mph')\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval, display_name = None):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color=str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        #ax.spines['top'].set_visible(False)\n        #ax.spines['left'].set_visible(False)\n        #ax.spines['right'].set_visible(False)\n        #ax.spines['bottom'].set_color('#FFFFFF')\n        ax.axis('off')\n        ax.tick_params(axis='x', colors='#FFFFFF', direction='in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#1e1e1e')\n        fig.patch.set_facecolor('#1e1e1e')\n        plt.tight_layout()\n        \n        return fig\n\n    @render.plot\n    def driver0_throttle():\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n    \n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    def driver0_brake():\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver0_topspeed():\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def driver1_topspeed():\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def dominance():\n        global locations\n        \n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n            \n            if len(plot_data.colour.unique()) == 1:\n                ax.plot(plot_data.x, plot_data.y, c=plot_data.colour.iloc[0], ls='-', lw=15)\n                ax.plot(plot_data.x + 100, plot_data.y - 100, c=plot_data.colour.iloc[0], ls='-', lw=8, alpha=0.15)\n            else:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] != plot_data.loc[i+1, 'dominance']):\n                        current_segment += 1\n\n                ax.plot(plot_data.x + 100, plot_data.y - 100, c='#FFFFFF', ls='-', lw=15, alpha=0.15)\n\n                for c in plot_data.colour.unique():\n                    plot_data_c = plot_data[plot_data.colour == c]\n                    for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment == seg]\n                        if plot_segment.shape[0] > 1:\n                            if seg == -1:\n                                lw = 10\n                            else:\n                                lw = 15\n                            ax.plot(\n                                plot_segment.x,\n                                plot_segment.y,\n                                c=plot_segment.colour.iloc[0],\n                                marker='o',\n                                ls='-',lw=lw)\n                #ax.text(0, ax.get_ylim()[1]+600, 'Track Dominance', verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n        ax.axis('off')\n        ax.set_facecolor('#1e1e1e')\n\n        fig.patch.set_facecolor('#1e1e1e')\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240330_2.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nfrom scipy import stats\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\n\nlocations = []\n\n\nf1_red = '#E6002B'\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2024'),\n        ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n        ui.input_selectize(\"session\",\"Session:\", choices=[]),\n        ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n        width = '320px',\n        bg=f1_red,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height=100, style='background:#1e1e1e')),\n        ui.column(6, ui.card(ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height=100, style='text-align:center; font-size:1.1em; font-weight:bold; color:#FFFFFF; background:#1e1e1e; border: 1px solid ' + f1_red)),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=100, style='background:#1e1e1e'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height=100, style='background:#1e1e1e;'),\n                ui.card(ui.output_plot(\"driver0_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e',\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#1e1e1e'),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height=100, style='background:#1e1e1e'),\n            height = 400,\n            style='background:#1e1e1e'\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('dominance'),\n        height = 250,\n    ),\n    style='background:#1e1e1e'\n)\n\ndef server(input, output, session):\n    def get_event_name(idx):\n        if idx != '':\n            return events.event_name[int(idx)]\n\n    def get_driver_name(idx):\n        if idx != '':\n            return drivers.full_name[int(idx)]\n\n    def get_driver_name_acronym(idx):\n        if idx != '':\n            return drivers.name_acronym[int(idx)]\n\n    def get_driver_num(idx):\n        if idx != '':\n            return str(drivers.driver_number[int(idx)])\n\n    def get_session_name(idx):\n        if idx != '':\n            return sessions.session_name[int(idx)]\n\n    def api_to_df(call_type, filters):\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1] == '?':\n                call_str += f\n            else:\n                call_str += '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n    \n    @reactive.effect\n    def update_event_list_with_year():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year='+str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            \n            selected_year = None\n            events = None\n            selected_meeting_key = None\n\n        ui.update_selectize(\"session\",choices=[])\n        ui.update_selectize(\"driver\",choices=[])\n        \n        sessions = None\n        selected_session_key = None\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @render.text\n    def sub_head():\n        session_name = get_session_name(input.session())\n        return session_name if session_name != None else ''\n\n    @reactive.effect\n    def update_session_list_with_event():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if len(input.event()) > 0:\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            #response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year='+str(selected_year),'meeting_key='+str(selected_meeting_key)])\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n        else:\n            ui.update_selectize(\"session\",choices=[])\n\n            sessions = None\n            selected_session_key = None\n\n        ui.update_selectize(\"driver\", choices=[])\n        drivers = None\n        car_data = []\n        selected_driver_colour = []            \n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    def format_driver_names(idx_list, driver0_or_1):\n        if len(idx_list) > driver0_or_1:\n            names = get_driver_name(idx_list[driver0_or_1]).split()\n            return '\\n'.join(names), get_driver_name_acronym(idx_list[driver0_or_1])\n        else:\n            return 'Driver ' + str(driver0_or_1 + 1), str(driver0_or_1 + 1)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment='top', horizontalalignment='left', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=48, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#1e1e1e')\n        ax.set_facecolor('#1e1e1e')\n        ax.axis('off')\n        #plt.tight_layout(pad=0.01)\n        return fig\n\n    @render.plot\n    def driver0():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),0)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver0_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        # helper functions to map speed to car x, y position on track and determine which car is faster (dominant)\n        def get_speed_from_car_data(car_num, time):\n            global car_data\n            before = car_data[car_num].date < time\n            after = car_data[car_num].date >= time \n            speed_before = -1 if len(car_data[car_num][before].speed) == 0 else car_data[car_num][before].speed.iloc[-1]\n            speed_after = -1 if len(car_data[car_num][after].speed) == 0 else car_data[car_num][after].speed.iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        def calc_dominance(x, y, speed):\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist == loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if len(input.driver()) > 0 and len(input.driver()) <= 2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + str(drivers.team_colour[int(d)]) if drivers.team_colour[int(d)] is not None else '#ae89c4' for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                elif selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour = [f1_red, '#FFFFFF']\n            '''\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = '#ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = '#ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n            '''\n                            \n\n            #print(selected_driver_number, selected_driver_colour)\n\n            #responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            #responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            responses = [api_to_df('laps',['session_key='+str(selected_session_key),'driver_number='+str(d)]) for d in selected_driver_number]\n\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            locations = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n\n                car_data_df = api_to_df('car_data',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                car_data_df['date'] = pd.to_datetime(car_data_df.date, format='mixed') - pd.to_datetime(car_data_df.date,format='mixed').min()\n                car_data.append(car_data_df)\n\n                locations_df = api_to_df('location',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                locations_df['date'] = pd.to_datetime(locations_df.date, format='mixed') - pd.to_datetime(locations_df.date,format='mixed').min()\n                start_x = locations_df[locations_df.date == locations_df.date.min()].x.iloc[0]\n                start_y = locations_df[locations_df.date == locations_df.date.min()].y.iloc[0]\n                locations_df['x'] = locations_df.x - start_x\n                locations_df['y'] = locations_df.y - start_y\n                locations.append(locations_df)\n\n                locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        #print(pt.x, pt.y, pt.date)\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data(j, time)\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed \n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth twice\n                smooth = 12\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+smooth, 'dominance'])[0]\n\n                smooth = 8\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+smooth, 'dominance'])[0]\n\n\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance == 0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance == 1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    #data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color=str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text='Speed / mph')\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval, display_name = None):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color=str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        #ax.spines['top'].set_visible(False)\n        #ax.spines['left'].set_visible(False)\n        #ax.spines['right'].set_visible(False)\n        #ax.spines['bottom'].set_color('#FFFFFF')\n        ax.axis('off')\n        ax.tick_params(axis='x', colors='#FFFFFF', direction='in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#1e1e1e')\n        fig.patch.set_facecolor('#1e1e1e')\n        plt.tight_layout()\n        \n        return fig\n\n    @render.plot\n    def driver0_throttle():\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n    \n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    def driver0_brake():\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver0_topspeed():\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def driver1_topspeed():\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def dominance():\n        global locations\n        \n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n            \n            # draw driver0\n            ax.plot(plot_data.x + 100, plot_data.y - 450, c='#FFFFFF', ls='-', lw=30, alpha=0.15)\n            #ax.plot(plot_data.x + 150, plot_data.y - 500, c='#FFFFFF', ls='-', lw=10, alpha=0.2)\n            ax.plot(plot_data.x, plot_data.y, c=selected_driver_colour[0], ls='-', lw=18)\n\n            # work out segments for drawing\n            if len(plot_data.colour.unique()) > 1:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] != plot_data.loc[i+1, 'dominance']):\n                        current_segment += 1\n\n                # only draw driver1 dominant segments\n                plot_data_c = plot_data[plot_data.dominance == 1]\n                for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment == seg]\n                        if plot_segment.shape[0] > 1:\n                            ax.plot(\n                                plot_segment.x,\n                                plot_segment.y,\n                                c=selected_driver_colour[1],\n                                marker='o',\n                                ls='-',lw=8)\n        ax.axis('off')\n        ax.set_facecolor('#1e1e1e')\n\n        fig.patch.set_facecolor('#1e1e1e')\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240331.py", "content": "from urllib.request import urlopen\nimport json\nimport re\n\nimport pandas as pd\nfrom scipy import stats\n\nfrom shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\n\n\nevents = None\nsessions = None\ndrivers = None\ncar_data = []\nselected_year = None\nselected_meeting_key = None\nselected_session_key = None\nselected_driver_number = []\nselected_driver_colour = [None, None]\n\nlocations = []\n\n\nf1_red = '#E6002B'\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.card(\n            ui.input_selectize(\"year\",\"Year: \", choices=['2023','2024'], selected='2024'),\n            ui.input_selectize(\"event\",\"Event:\", choices=[], selected=0),\n            ui.input_selectize(\"session\",\"Session:\", choices=[]),\n            ui.input_selectize('driver',\"Driver:\", choices=[], multiple=True),\n            height = 600,\n            style='background:'+f1_red,\n        ),\n        ui.output_text('ack'),\n        width = '320px',\n        bg=f1_red,\n        fg='#FFFFFF',\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height=80, style='background:#111111')),\n        ui.column(6, ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height=80, style='text-align:center; line-height:2; font-size:1.6em; font-weight:bold; color:#FFFFFF; background:#111111; border: 1px solid ' + f1_red),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height=80, style='background:#111111'))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height=100, style='background:#111111;'),\n                ui.card(ui.output_plot(\"driver0_brake\"), height=100, style='background:#111111'),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height=100, style='background:#111111'),\n            height = 400,\n            style='background:#111111',\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height=100, style='background:#111111'),\n                ui.card(ui.output_plot(\"driver1_brake\"), height=100, style='background:#111111'),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height=100, style='background:#111111'),\n            height = 400,\n            style='background:#111111'\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('dominance'),\n        height = 250,\n    ),\n    style='background:#111111'\n)\n\ndef server(input, output, session):\n    def get_event_name(idx):\n        if idx != '':\n            return events.event_name[int(idx)]\n\n    def get_driver_name(idx):\n        if idx != '':\n            return drivers.full_name[int(idx)]\n\n    def get_driver_name_acronym(idx):\n        if idx != '':\n            return drivers.name_acronym[int(idx)]\n\n    def get_driver_num(idx):\n        if idx != '':\n            return str(drivers.driver_number[int(idx)])\n\n    def get_session_name(idx):\n        if idx != '':\n            return sessions.session_name[int(idx)]\n\n    def api_to_df(call_type, filters):\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1] == '?':\n                call_str += f\n            else:\n                call_str += '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n    @render.text\n    def ack():\n        return 'Credit to the open-sourced OpenF1.org API (https://openf1.org/) for the Formula One\u00ae telemetry data used in this dashboard'\n        \n    \n    @reactive.effect\n    def update_event_list_with_year():\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year='+selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year='+str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis=1)\\\n                    .rename(columns={'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                ui.update_selectize(\"event\",choices=events.event_name)\n\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices=[])\n            \n            selected_year = None\n            events = None\n            selected_meeting_key = None\n\n        ui.update_selectize(\"session\",choices=[])\n        ui.update_selectize(\"driver\",choices=[])\n        \n        sessions = None\n        selected_session_key = None\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header():\n        event_name = get_event_name(input.event())\n        return input.year() + ' ' + event_name if event_name != None else input.year()\n\n    @render.text\n    def sub_head():\n        session_name = get_session_name(input.session())\n        return session_name if session_name != None else ''\n\n    @reactive.effect\n    def update_session_list_with_event():\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if len(input.event()) > 0:\n            selected_meeting_key = events.meeting_key[int(input.event())]\n        \n            #response = urlopen('https://api.openf1.org/v1/sessions?year='+str(selected_year)+'&meeting_key='+str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year='+str(selected_year),'meeting_key='+str(selected_meeting_key)])\n            \n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis=1)\n\n            ui.update_selectize(\"session\",choices=sessions.session_name)\n        else:\n            ui.update_selectize(\"session\",choices=[])\n\n            sessions = None\n            selected_session_key = None\n\n        ui.update_selectize(\"driver\", choices=[])\n        drivers = None\n        car_data = []\n        selected_driver_colour = []            \n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session():\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n            \n            response = urlopen('https://api.openf1.org/v1/drivers?session_key='+str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis=1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices=drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices=[])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    def format_driver_names(idx_list, driver0_or_1):\n        if len(idx_list) > driver0_or_1:\n            names = get_driver_name(idx_list[driver0_or_1]).split()\n            return '\\n'.join([names[0],' '.join(names[1:])]), get_driver_name_acronym(idx_list[driver0_or_1])\n        else:\n            return 'Driver ' + str(driver0_or_1 + 1), str(driver0_or_1 + 1)\n\n    def plot_names(front_name, back_name):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment='top', horizontalalignment='left', color='#aaaaaa', clip_on=False, fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=36, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='italic', fontfamily='sans-serif', fontsize=13)\n        fig.patch.set_facecolor('#111111')\n        ax.set_facecolor('#111111')\n        ax.axis('off')\n        plt.tight_layout(pad=0)\n        return fig\n\n    @render.plot\n    def driver0():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),0)\n        return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver1():\n        from matplotlib import pyplot as plt\n        front_name, back_name = format_driver_names(input.driver(),1)\n        return plot_names(front_name, back_name)\n\n    @render.text\n    def driver0_num():\n        return get_driver_num(input.driver()[0]) if len(input.driver()) > 0 is not None else ''\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    def update_cardata_with_driver():\n        # helper functions to map speed to car x, y position on track and determine which car is faster (dominant)\n        def get_speed_from_car_data(car_num, time):\n            global car_data\n            before = car_data[car_num].date < time\n            after = car_data[car_num].date >= time \n            speed_before = -1 if len(car_data[car_num][before].speed) == 0 else car_data[car_num][before].speed.iloc[-1]\n            speed_after = -1 if len(car_data[car_num][after].speed) == 0 else car_data[car_num][after].speed.iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        def calc_dominance(x, y, speed):\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist == loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        # print(input.driver())\n        if len(input.driver()) > 0 and len(input.driver()) <= 2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n \n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + str(drivers.team_colour[int(d)]) if drivers.team_colour[int(d)] is not None else '#ae89c4' for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                elif selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour = [f1_red, '#FFFFFF']\n            '''\n            if len(selected_driver_colour) > 1:\n                if selected_driver_colour[0] is None and selected_driver_colour[1] is None:\n                    selected_driver_colour = ['#1b14e3','#FFFFFF']\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n                if selected_driver_colour[1] is None:\n                    selected_driver_colour[1] = '#ae89c4'\n                if selected_driver_colour[0] == selected_driver_colour[1]:\n                    selected_driver_colour[1] = '#ae89c4'\n            elif len(selected_driver_colour) == 1:\n                if selected_driver_colour[0] is None:\n                    selected_driver_colour[0] = '#ae89c4'\n            '''\n                            \n\n            #print(selected_driver_number, selected_driver_colour)\n\n            #responses = [urlopen('https://api.openf1.org/v1/laps?session_key='+str(selected_session_key)+'&driver_number='+str(d)) for d in selected_driver_number]\n            #responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            responses = [api_to_df('laps',['session_key='+str(selected_session_key),'driver_number='+str(d)]) for d in selected_driver_number]\n\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration == r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            locations = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds=fastest_lap_duration))\n                fastest_lap_end = re.sub('\\\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n\n                car_data_df = api_to_df('car_data',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                car_data_df['date'] = pd.to_datetime(car_data_df.date, format='mixed') - pd.to_datetime(car_data_df.date,format='mixed').min()\n                car_data.append(car_data_df)\n\n                locations_df = api_to_df('location',['driver_number='+str(selected_driver_number[i]),'session_key='+str(selected_session_key),'date>='+str(fastest_lap_start),'date<='+str(fastest_lap_end)])\n                locations_df['date'] = pd.to_datetime(locations_df.date, format='mixed') - pd.to_datetime(locations_df.date,format='mixed').min()\n                start_x = locations_df[locations_df.date == locations_df.date.min()].x.iloc[0]\n                start_y = locations_df[locations_df.date == locations_df.date.min()].y.iloc[0]\n                locations_df['x'] = locations_df.x - start_x\n                locations_df['y'] = locations_df.y - start_y\n                locations.append(locations_df)\n\n                locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        #print(pt.x, pt.y, pt.date)\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data(j, time)\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed \n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth twice\n                smooth = 12\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+smooth, 'dominance'])[0]\n\n                smooth = 8\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i+smooth, 'dominance'])[0]\n\n\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance == 0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance == 1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    def tele_plot():\n        import plotly.express as px\n        import plotly.graph_objects as go\n        \n        fig = go.Figure()\n\n        if input.driver() != '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    #data['date'] = (pd.to_datetime(data.date, format='mixed') - pd.to_datetime(data.date,format='mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace=True)\n                    data['date'] = pd.to_datetime(data.date,format='%M:%S.%f')\n                    data.dropna(inplace=True)\n                    \n                    dr_mask = drivers.driver_number == selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<=.[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n                    \n                    fig.add_trace(go.Scatter(x=data.date, y=data.speed, line=(dict(color=str(selected_driver_colour[i]))) , name=list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template='plotly_dark',\n            plot_bgcolor='black',\n            showlegend=True,\n            legend=dict(yanchor='bottom',y=0.01,xanchor='right',x=0.99,orientation='h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text='Speed / mph')\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval, display_name = None):\n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color=str(selected_driver_colour[num]), height = 0.1, align='center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment='top', horizontalalignment='right', color='#FFFFFF', fontstyle='oblique', fontweight='bold', fontfamily='sans-serif', fontsize=22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment='top', horizontalalignment='left', color='#FFFFFF', fontstyle='oblique',fontweight='bold', fontfamily='sans-serif', fontsize=14)\n\n\n        #ax.spines['top'].set_visible(False)\n        #ax.spines['left'].set_visible(False)\n        #ax.spines['right'].set_visible(False)\n        #ax.spines['bottom'].set_color('#FFFFFF')\n        ax.axis('off')\n        ax.tick_params(axis='x', colors='#FFFFFF', direction='in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor('#111111')\n        fig.patch.set_facecolor('#111111')\n        plt.tight_layout()\n        \n        return fig\n\n    @render.plot\n    def driver0_throttle():\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n    \n    @render.plot\n    def driver1_throttle():\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    def driver0_brake():\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver1_brake():\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    def driver0_topspeed():\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def driver1_topspeed():\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    def dominance():\n        global locations\n        \n        from matplotlib import pyplot as plt\n        fig, ax = plt.subplots()\n\n        if input.driver() != '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n            \n            # draw driver0\n            ax.plot(plot_data.x + 70, plot_data.y - 350, c='#FFFFFF', ls='-', lw=10, alpha=0.15)\n            #ax.plot(plot_data.x + 150, plot_data.y - 500, c='#FFFFFF', ls='-', lw=10, alpha=0.2)\n            ax.plot(plot_data.x, plot_data.y, c='#001010', ls='-', lw=6)\n            ax.plot(plot_data.x, plot_data.y, c=selected_driver_colour[0], ls='-', lw=4)\n\n            # work out segments for drawing\n            if len(plot_data.colour.unique()) > 1:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] != plot_data.loc[i+1, 'dominance']):\n                        current_segment += 1\n\n                # only draw driver1 dominant segments\n                plot_data_c = plot_data[plot_data.dominance == 1]\n                for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment == seg]\n                        if plot_segment.shape[0] > 1:\n                            ax.plot(\n                                plot_segment.x,\n                                plot_segment.y,\n                                c=selected_driver_colour[1],\n                                ls='-',lw=4)\n\n            ax.plot(plot_data.x[0], plot_data.y[0], c='#000000', marker='o', markersize=8)\n            ax.plot(plot_data.x[0], plot_data.y[0], c='#FFFFFF', marker='o', markersize=6)\n\n        ax.axis('off')\n        ax.set_facecolor('#111111')\n        \n        fig.patch.set_facecolor('#111111')\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240331_2.py", "content": "from shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom urllib.request import urlopen\nfrom scipy import stats\nimport pandas as pd\nimport json\nimport re\n\n# declare variables\n# lists for drop down selections\nyears: list[str] = ['2023','2024']\nevents: list[str] = None\nsessions: list[str] = None\ndrivers: list[str] = None\n\n# selected from drop down selections\nselected_year: str = None\nselected_meeting_key: str = None\nselected_session_key: str = None\nselected_driver_number: list[str] = []\nselected_driver_colour: list[str] = [None, None]\n\n# telemetry data downloaded retrieved\ncar_data: list[pd.DataFrame] = []\nlocations: list[pd.DataFrame] = []\n\n# colours\nf1_red: str = '#E6002B'\nmain_bg_colour: str = '#111111'\ntext_colour: str = '#FFFFFF'\ntext_grey: str = '#AAAAAA'\ndefault_driver0_colour: str = f1_red # '#1b14e3'\ndefault_driver1_colour: str = text_colour\ndefault_driver_colour: str = '#ae89c4'\ntrack_border_colour: str = '#000000'\ntrack_grey: str = '#001010'\n# tracker_border_colour_driver1: str = text_colour\n\n# action control variables\nrefresh_now: bool = False\n\n# Shiny app layout\napp_ui: ui.page_sidebar = ui.page_sidebar(\n    ui.sidebar(\n        ui.card(\n            ui.input_selectize(\"year\",\"Year: \", choices = years, selected = '2024'),\n            ui.input_selectize(\"event\",\"Event:\", choices = [], selected = 0),\n            ui.input_selectize(\"session\",\"Session:\", choices = []),\n            ui.input_selectize('driver',\"Driver:\", choices = [], multiple = True),\n            ui.input_action_button('refresh','Refresh', class_ = 'btn-success', style = 'color:' + text_colour  + '; background:' + f1_red + 'border: 1px solid ' + text_colour),\n            height = 600,\n            style = 'color:' + text_colour + '; background:' + f1_red,\n        ),\n        ui.output_text('ack'), width = '320px',\n        bg = f1_red,\n        fg = text_colour,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height = 80, style = 'background:' + main_bg_colour)),\n        ui.column(6, ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height = 80, style = 'text-align:center; line-height:2; font-size:1.6em; font-weight:bold; color:' + text_colour + '; background:' + main_bg_colour + '; border: 1px solid ' + f1_red),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height = 80, style = 'background:' + main_bg_colour))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour,\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('dominance'),\n        height = 250,\n    ),\n    style = 'background:' + main_bg_colour\n)\n\ndef server(input, output, session):\n    def get_event_name(idx: int) -> str:\n        return events.event_name[idx]\n\n    def get_driver_name(idx: int) -> str:\n        return drivers.full_name[idx]\n\n    def get_driver_name_acronym(idx: int) -> str:\n        return drivers.name_acronym[idx]\n\n    def get_driver_num(idx: int) -> str:\n        return str(drivers.driver_number[idx])\n\n    def get_session_name(idx: int) -> str:\n        return sessions.session_name[idx]\n\n    def api_to_df(call_type: str, filters: list[str]) -> pd.DataFrame:\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1]  ==  '?':\n                call_str  +=  f\n            else:\n                call_str  +=  '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n    def format_driver_names(driver_idx: int) -> str:\n        names = get_driver_name(driver_idx).split()\n        return '\\n'.join([names[0],' '.join(names[1:])]), get_driver_name_acronym(driver_idx)\n\n    def plot_names(front_name: str, back_name: str) -> plt.figure:\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_grey, clip_on = False, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 36, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'italic', fontfamily = 'sans-serif', fontsize = 13)\n        fig.patch.set_facecolor(main_bg_colour)\n        ax.set_facecolor(main_bg_colour)\n        ax.axis('off')\n        plt.tight_layout(pad = 0)\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, num, func, minval, maxval, display_name = None) -> plt.figure:\n        fig, ax = plt.subplots()\n\n        if input.driver() !=  '' and len(car_data) > num:\n            plot_data = car_data.copy()[num]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color = str(selected_driver_colour[num]), height = 0.1, align = 'center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_colour, fontstyle = 'oblique',fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 14)\n\n        ax.axis('off')\n        ax.tick_params(axis = 'x', colors = text_colour, direction = 'in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor(main_bg_colour)\n        fig.patch.set_facecolor(main_bg_colour)\n        plt.tight_layout()\n\n        return fig\n\n    \n    @render.text\n    def ack() -> str:\n        return 'Credit to the open-sourced OpenF1.org API (https://openf1.org/) for the Formula One\u00ae telemetry data used in this dashboard'\n\n    @reactive.effect\n    def update_event_list_with_year() -> None:\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year = ' + selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year=' + str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis = 1)\\\n                    .rename(columns = {'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                ui.update_selectize(\"event\",choices = events.event_name)\n\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices = [])\n\n            selected_year = None\n            events = None\n            selected_meeting_key = None\n\n        ui.update_selectize(\"session\",choices = [])\n        ui.update_selectize(\"driver\",choices = [])\n\n        sessions = None\n        selected_session_key = None\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header() -> str:\n        if input.event():\n            event_name = get_event_name(int(input.event()))\n            return input.year() + ' ' + event_name if event_name !=  None else input.year()\n\n    @render.text\n    def sub_head() -> str:\n        if input.session():\n            session_name = get_session_name(int(input.session()))\n            return session_name if session_name !=  None else ''\n\n    @reactive.effect\n    def update_session_list_with_event() -> None:\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if input.year() and input.event():\n            selected_meeting_key = events.meeting_key[int(input.event())]\n\n            #response = urlopen('https://api.openf1.org/v1/sessions?year = ' + str(selected_year) + '&meeting_key = ' + str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year=' + str(selected_year),'meeting_key=' + str(selected_meeting_key)])\n\n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis = 1)\n\n            ui.update_selectize(\"session\",choices = sessions.session_name)\n        else:\n            ui.update_selectize(\"session\",choices = [])\n\n            sessions = None\n            selected_session_key = None\n\n        ui.update_selectize(\"driver\", choices = [])\n        drivers = None\n        car_data = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session() -> None:\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n\n            response = urlopen('https://api.openf1.org/v1/drivers?session_key=' + str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis = 1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices = drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices = [])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    @render.plot\n    #@reactive.event(input.refresh, ignore_none = False)\n    def driver0() -> plt.figure:\n        if input.driver():\n            front_name, back_name = format_driver_names(int(input.driver()[0]))\n            return plot_names(front_name, back_name)\n\n    @render.plot\n    #@reactive.event(input.refresh, ignore_none = False)\n    def driver1() -> plt.figure:\n        if len(input.driver())  ==  2:\n            front_name, back_name = format_driver_names(int(input.driver()[1]))\n            return plot_names(front_name, back_name)\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    @reactive.event(input.refresh, ignore_none = False)\n    def update_cardata_with_driver() -> None:\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        if input.driver():\n            print(get_driver_num(int(input.driver()[0])), input.driver(), selected_driver_number)\n\n        # helper functions to map speed to car x, y position on track and determine which car is faster (dominant)\n        def get_speed_from_car_data(idx: int, time: pd._libs.tslibs.timedeltas.Timedelta) -> float:\n            global car_data\n            before = car_data[idx].date < time\n            after = car_data[idx].date >=  time\n            speed_before = -1 if len(car_data[idx][before].speed)  ==  0 else car_data[idx][before].speed.iloc[-1]\n            speed_after = -1 if len(car_data[idx][after].speed)  ==  0 else car_data[idx][after].speed.iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        def calc_dominance(x: int, y: int, speed: float) -> int:\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist  ==  loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        # print(input.driver())\n        if len(input.driver()) > 0 and len(input.driver()) <=  2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + str(drivers.team_colour[int(d)]) if drivers.team_colour[int(d)] is not None else default_driver_colour for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if  (selected_driver_colour[0]  ==  selected_driver_colour[1]): # or (selected_driver_colour[0] is None and selected_driver_colour[1] is None)\n                    selected_driver_colour = [default_driver0_colour, default_driver1_colour]\n\n            #print(selected_driver_number, selected_driver_colour)\n\n            #responses = [urlopen('https://api.openf1.org/v1/laps?session_key = ' + str(selected_session_key) + '&driver_number = ' + str(d)) for d in selected_driver_number]\n            #responses = [pd.DataFrame(json.loads(r.read().decode('utf-8'))) for r in responses]\n            responses = [api_to_df('laps',['session_key=' + str(selected_session_key),'driver_number=' + str(d)]) for d in selected_driver_number]\n\n            #[print(r.columns) for r in responses]\n            fastest_laps = [\n                r[(r.lap_duration  ==  r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n            #print(fastest_laps)\n\n            car_data = []\n            locations = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds = fastest_lap_duration))\n                fastest_lap_end = re.sub('\\\\s', 'T', fastest_lap_end)\n                #print(selected_driver_number[i])\n\n                car_data_df = api_to_df('car_data',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                car_data_df['date'] = pd.to_datetime(car_data_df.date, format = 'mixed') - pd.to_datetime(car_data_df.date,format = 'mixed').min()\n                car_data.append(car_data_df)\n\n                locations_df = api_to_df('location',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                locations_df['date'] = pd.to_datetime(locations_df.date, format = 'mixed') - pd.to_datetime(locations_df.date,format = 'mixed').min()\n                start_x = locations_df[locations_df.date  ==  locations_df.date.min()].x.iloc[0]\n                start_y = locations_df[locations_df.date  ==  locations_df.date.min()].y.iloc[0]\n                locations_df['x'] = locations_df.x - start_x\n                locations_df['y'] = locations_df.y - start_y\n                locations.append(locations_df)\n\n                locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        #print(pt.x, pt.y, pt.date)\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data(j, time)\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed\n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth twice\n                smooth = 12\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n                smooth = 8\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance  ==  0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance  ==  1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    @reactive.event(input.refresh, ignore_none = False)\n    def tele_plot() -> go.Figure:\n        fig = go.Figure()\n\n        if input.driver() !=  '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    #data['date'] = (pd.to_datetime(data.date, format = 'mixed') - pd.to_datetime(data.date,format = 'mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace = True)\n                    data['date'] = pd.to_datetime(data.date,format = '%M:%S.%f')\n                    data.dropna(inplace = True)\n\n                    dr_mask = drivers.driver_number  ==  selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<= .[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n\n                    fig.add_trace(go.Scatter(x = data.date, y = data.speed, line = (dict(color = str(selected_driver_colour[i]))) , name = list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template = 'plotly_dark',\n            plot_bgcolor = 'black',\n            showlegend = True,\n            legend = dict(yanchor = 'bottom',y = 0.01,xanchor = 'right',x = 0.99,orientation = 'h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text = 'Speed / mph')\n        return fig\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_throttle() -> plt.figure:\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_throttle() -> plt.figure:\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_brake() -> plt.figure:\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_brake() -> plt.figure:\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_topspeed() -> plt.figure:\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_topspeed() -> plt.figure:\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def dominance() -> go.Figure:\n        global locations\n\n        fig, ax = plt.subplots()\n\n        if input.driver() !=  '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n\n            # draw driver0\n            ax.plot(plot_data.x + 70, plot_data.y - 350, c = text_colour, ls = '-', lw = 10, alpha = 0.15)\n            ax.plot(plot_data.x, plot_data.y, c = track_grey, ls = '-', lw = 6)\n            ax.plot(plot_data.x, plot_data.y, c = selected_driver_colour[0], ls = '-', lw = 4)\n\n            # work out segments for drawing\n            if len(plot_data.colour.unique()) > 1:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] !=  plot_data.loc[i + 1, 'dominance']):\n                        current_segment  +=  1\n\n                # only draw driver1 dominant segments\n                plot_data_c = plot_data[plot_data.dominance  ==  1]\n                for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment  ==  seg]\n                        if plot_segment.shape[0] > 1:\n                            # ax.plot(plot_segment.x, plot_segment.y, c = tracker_border_colour_driver1, ls = '-', lw = 6)\n                            ax.plot(plot_segment.x, plot_segment.y, c = selected_driver_colour[1], ls = '-', lw = 4)\n\n            ax.plot(plot_data.x[0], plot_data.y[0], c = track_border_colour, marker = 'o', markersize = 8)\n            ax.plot(plot_data.x[0], plot_data.y[0], c = text_colour, marker = 'o', markersize = 6)\n\n        ax.axis('off')\n        ax.set_facecolor(main_bg_colour)\n\n        fig.patch.set_facecolor(main_bg_colour)\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240331_3.py", "content": "from shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom urllib.request import urlopen\nfrom scipy import stats\nimport pandas as pd\nimport json\nimport re\n\n# declare variables\n# lists for drop down selections\nyears: list[str] = ['2023','2024']\nevents: list[str] = None\nsessions: list[str] = None\ndrivers: list[str] = None\n\n# selected from drop down selections\nselected_year: str = None\nselected_meeting_key: str = None\nselected_session_key: str = None\nselected_driver_number: list[str] = []\nselected_driver_colour: list[str] = [None, None]\n\n# telemetry data downloaded retrieved\ncar_data: list[pd.DataFrame] = []\nlocations: list[pd.DataFrame] = []\n\n# colours\nf1_red: str = '#E6002B'\nmain_bg_colour: str = '#111111'\ntext_colour: str = '#FFFFFF'\ntext_grey: str = '#AAAAAA'\ndefault_driver0_colour: str = f1_red # '#1b14e3'\ndefault_driver1_colour: str = text_colour\ndefault_driver_colour: str = '#ae89c4'\ntrack_border_colour: str = '#000000'\ntrack_grey: str = '#001010'\n# tracker_border_colour_driver1: str = text_colour\n\n# action control variables\nrefresh_now: bool = False\n\n# Shiny app layout\napp_ui: ui.page_sidebar = ui.page_sidebar(\n    ui.sidebar(\n        ui.card(\n            ui.input_selectize(\"year\",\"Year: \", choices = years, selected = '2024'),\n            ui.input_selectize(\"event\",\"Event:\", choices = [], selected = 0),\n            ui.input_selectize(\"session\",\"Session:\", choices = []),\n            ui.input_selectize('driver',\"Driver:\", choices = [], multiple = True),\n            ui.input_action_button('refresh','Refresh', class_ = 'btn-success', style = 'color:' + text_colour  + '; background:' + f1_red + 'border: 1px solid ' + text_colour),\n            height = 600,\n            style = 'color:' + text_colour + '; background:' + f1_red,\n        ),\n        ui.output_text('ack'), width = '320px',\n        bg = f1_red,\n        fg = text_colour,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height = 80, style = 'background:' + main_bg_colour)),\n        ui.column(6, ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height = 80, style = 'text-align:center; line-height:2; font-size:1.6em; font-weight:bold; color:' + text_colour + '; background:' + main_bg_colour + '; border: 1px solid ' + f1_red),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height = 80, style = 'background:' + main_bg_colour))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour,\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('dominance'),\n        height = 250,\n    ),\n    style = 'background:' + main_bg_colour\n)\n\ndef server(input, output, session):\n    def get_event_name(idx: int) -> str:\n        return events.event_name[idx]\n\n    def get_driver_name(idx: int) -> str:\n        return drivers.full_name[idx]\n\n    def get_driver_name_acronym(idx: int) -> str:\n        return drivers.name_acronym[idx]\n\n    def get_driver_num(idx: int) -> str:\n        return str(drivers.driver_number[idx])\n\n    def get_session_name(idx: int) -> str:\n        return sessions.session_name[idx]\n\n    def api_to_df(call_type: str, filters: list[str]) -> pd.DataFrame:\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1]  ==  '?':\n                call_str  +=  f\n            else:\n                call_str  +=  '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n    def format_driver_names(driver_idx: int) -> str:\n        names = get_driver_name(driver_idx).split()\n        return '\\n'.join([names[0],' '.join(names[1:])]), get_driver_name_acronym(driver_idx)\n\n    def plot_names(front_name: str, back_name: str) -> plt.figure:\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_grey, clip_on = False, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 36, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'italic', fontfamily = 'sans-serif', fontsize = 13)\n        fig.patch.set_facecolor(main_bg_colour)\n        ax.set_facecolor(main_bg_colour)\n        ax.axis('off')\n        plt.tight_layout(pad = 0)\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, idx, func, minval, maxval, display_name = None) -> plt.figure:\n        fig, ax = plt.subplots()\n\n        if input.driver() !=  '' and len(car_data) > idx:\n            plot_data = car_data.copy()[idx]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color = str(selected_driver_colour[idx]), height = 0.1, align = 'center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_colour, fontstyle = 'oblique',fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 14)\n\n        ax.axis('off')\n        ax.tick_params(axis = 'x', colors = text_colour, direction = 'in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor(main_bg_colour)\n        fig.patch.set_facecolor(main_bg_colour)\n        plt.tight_layout()\n\n        return fig\n\n    \n    @render.text\n    def ack() -> str:\n        return 'Credit to the open-sourced OpenF1.org API (https://openf1.org/) for the Formula One\u00ae telemetry data used in this dashboard'\n\n    @reactive.effect\n    def update_event_list_with_year() -> None:\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year = ' + selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_to_df('meetings', ['year=' + str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis = 1)\\\n                    .rename(columns = {'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                ui.update_selectize(\"event\",choices = events.event_name)\n\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices = [])\n\n            selected_year = None\n            events = None\n            selected_meeting_key = None\n\n        ui.update_selectize(\"session\",choices = [])\n        ui.update_selectize(\"driver\",choices = [])\n\n        sessions = None\n        selected_session_key = None\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header() -> str:\n        if input.event():\n            event_name = get_event_name(int(input.event()))\n            return input.year() + ' ' + event_name if event_name !=  None else input.year()\n\n    @render.text\n    def sub_head() -> str:\n        if input.session():\n            session_name = get_session_name(int(input.session()))\n            return session_name if session_name !=  None else ''\n\n    @reactive.effect\n    def update_session_list_with_event() -> None:\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if input.year() and input.event():\n            selected_meeting_key = events.meeting_key[int(input.event())]\n\n            #response = urlopen('https://api.openf1.org/v1/sessions?year = ' + str(selected_year) + '&meeting_key = ' + str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_to_df('sessions', ['year=' + str(selected_year),'meeting_key=' + str(selected_meeting_key)])\n\n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis = 1)\n\n            ui.update_selectize(\"session\",choices = sessions.session_name)\n        else:\n            ui.update_selectize(\"session\",choices = [])\n\n            sessions = None\n            selected_session_key = None\n\n        ui.update_selectize(\"driver\", choices = [])\n        drivers = None\n        car_data = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session() -> None:\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n\n            response = urlopen('https://api.openf1.org/v1/drivers?session_key=' + str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis = 1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices = drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices = [])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    @render.plot\n    #@reactive.event(input.refresh, ignore_none = False)\n    def driver0() -> plt.figure:\n        if input.driver():\n            front_name, back_name = format_driver_names(int(input.driver()[0]))\n            return plot_names(front_name, back_name)\n\n    @render.plot\n    #@reactive.event(input.refresh, ignore_none = False)\n    def driver1() -> plt.figure:\n        if len(input.driver())  ==  2:\n            front_name, back_name = format_driver_names(int(input.driver()[1]))\n            return plot_names(front_name, back_name)\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    @reactive.event(input.refresh, ignore_none = False)\n    def update_cardata_with_driver() -> None:\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        if input.driver():\n            print(get_driver_num(int(input.driver()[0])), input.driver(), selected_driver_number)\n\n        # helper functions to map speed to car x, y position on track and determine which car is faster (dominant)\n        def get_speed_from_car_data(idx: int, time: pd._libs.tslibs.timedeltas.Timedelta) -> float:\n            global car_data\n            before = car_data[idx].date < time\n            after = car_data[idx].date >=  time\n            speed_before = -1 if len(car_data[idx][before].speed)  ==  0 else car_data[idx][before].speed.iloc[-1]\n            speed_after = -1 if len(car_data[idx][after].speed)  ==  0 else car_data[idx][after].speed.iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        def calc_dominance(x: int, y: int, speed: float) -> int:\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist  ==  loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        # print(input.driver())\n        if len(input.driver()) > 0 and len(input.driver()) <=  2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + str(drivers.team_colour[int(d)]) if drivers.team_colour[int(d)] is not None else default_driver_colour for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(selected_driver_colour) > 1:\n                if  (selected_driver_colour[0]  ==  selected_driver_colour[1]): # or (selected_driver_colour[0] is None and selected_driver_colour[1] is None)\n                    selected_driver_colour = [default_driver0_colour, default_driver1_colour]\n\n            responses = [api_to_df('laps',['session_key=' + str(selected_session_key),'driver_number=' + str(d)]) for d in selected_driver_number]\n\n            fastest_laps = [\n                r[(r.lap_duration  ==  r.lap_duration.min()) &\n                  -r.duration_sector_3.isna()]\n                for r in responses]\n\n            car_data = []\n            locations = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds = fastest_lap_duration))\n                fastest_lap_end = re.sub('\\\\s', 'T', fastest_lap_end)\n\n                car_data_df = api_to_df('car_data',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                car_data_df['date'] = pd.to_datetime(car_data_df.date, format = 'mixed') - pd.to_datetime(car_data_df.date,format = 'mixed').min()\n                car_data.append(car_data_df)\n\n                locations_df = api_to_df('location',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                locations_df['date'] = pd.to_datetime(locations_df.date, format = 'mixed') - pd.to_datetime(locations_df.date,format = 'mixed').min()\n                start_x = locations_df[locations_df.date  ==  locations_df.date.min()].x.iloc[0]\n                start_y = locations_df[locations_df.date  ==  locations_df.date.min()].y.iloc[0]\n                locations_df['x'] = locations_df.x - start_x\n                locations_df['y'] = locations_df.y - start_y\n                locations.append(locations_df)\n\n                locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        #print(pt.x, pt.y, pt.date)\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data(j, time)\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed\n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth twice\n                smooth = 12\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n                smooth = 8\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance  ==  0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance  ==  1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    @reactive.event(input.refresh, ignore_none = False)\n    def tele_plot() -> go.Figure:\n        fig = go.Figure()\n\n        if input.driver() !=  '' and len(car_data) > 0:\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    #data['date'] = (pd.to_datetime(data.date, format = 'mixed') - pd.to_datetime(data.date,format = 'mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace = True)\n                    data['date'] = pd.to_datetime(data.date,format = '%M:%S.%f')\n                    data.dropna(inplace = True)\n\n                    dr_mask = drivers.driver_number  ==  selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<= .[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n\n                    fig.add_trace(go.Scatter(x = data.date, y = data.speed, line = (dict(color = str(selected_driver_colour[i]))) , name = list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template = 'plotly_dark',\n            plot_bgcolor = 'black',\n            showlegend = True,\n            legend = dict(yanchor = 'bottom',y = 0.01,xanchor = 'right',x = 0.99,orientation = 'h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text = 'Speed / mph')\n        return fig\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_throttle() -> plt.figure:\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_throttle() -> plt.figure:\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_brake() -> plt.figure:\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_brake() -> plt.figure:\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_topspeed() -> plt.figure:\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_topspeed() -> plt.figure:\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def dominance() -> go.Figure:\n        global locations\n\n        fig, ax = plt.subplots()\n\n        if input.driver() !=  '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n\n            # draw driver0\n            ax.plot(plot_data.x + 70, plot_data.y - 350, c = text_colour, ls = '-', lw = 10, alpha = 0.15)\n            ax.plot(plot_data.x, plot_data.y, c = track_grey, ls = '-', lw = 6)\n            ax.plot(plot_data.x, plot_data.y, c = selected_driver_colour[0], ls = '-', lw = 4)\n\n            # work out segments for drawing\n            if len(plot_data.colour.unique()) > 1:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] !=  plot_data.loc[i + 1, 'dominance']):\n                        current_segment  +=  1\n\n                # only draw driver1 dominant segments\n                plot_data_c = plot_data[plot_data.dominance  ==  1]\n                for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment  ==  seg]\n                        if plot_segment.shape[0] > 1:\n                            # ax.plot(plot_segment.x, plot_segment.y, c = tracker_border_colour_driver1, ls = '-', lw = 6)\n                            ax.plot(plot_segment.x, plot_segment.y, c = selected_driver_colour[1], ls = '-', lw = 4)\n\n            ax.plot(plot_data.x[0], plot_data.y[0], c = track_border_colour, marker = 'o', markersize = 8)\n            ax.plot(plot_data.x[0], plot_data.y[0], c = text_colour, marker = 'o', markersize = 6)\n\n        ax.axis('off')\n        ax.set_facecolor(main_bg_colour)\n\n        fig.patch.set_facecolor(main_bg_colour)\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240331_4.py", "content": "from shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom urllib.request import urlopen\nfrom scipy import stats\nimport pandas as pd\nimport json\nimport re\n\n# declare variables\n# lists for drop down selections\nyears: list[str] = ['2023','2024']\nevents: list[str] = None\nsessions: list[str] = None\ndrivers: list[str] = None\n\n# selected from drop down selections\nselected_year: str = None\nselected_meeting_key: str = None\nselected_session_key: str = None\nselected_driver_number: list[str] = []\nselected_driver_colour: list[str] = [None, None]\n\n# telemetry data downloaded retrieved\ncar_data: list[pd.DataFrame] = []\nlocations: list[pd.DataFrame] = []\n\n# colours\nf1_red: str = '#E6002B'\nmain_bg_colour: str = '#111111'\ntext_colour: str = '#FFFFFF'\ntext_grey: str = '#AAAAAA'\ndefault_driver0_colour: str = f1_red # '#1b14e3'\ndefault_driver1_colour: str = text_colour\ndefault_driver_colour: str = '#ae89c4'\ntrack_border_colour: str = '#000000'\ntrack_grey: str = '#001010'\n# tracker_border_colour_driver1: str = text_colour\n\n# action control variables\nrefresh_now: bool = False\n\n# Shiny app layout\napp_ui: ui.page_sidebar = ui.page_sidebar(\n    ui.sidebar(\n        ui.card(\n            ui.input_selectize(\"year\",\"Year: \", choices = years, selected = '2024'),\n            ui.input_selectize(\"event\",\"Event:\", choices = [], selected = 0),\n            ui.input_selectize(\"session\",\"Session:\", choices = []),\n            ui.input_selectize('driver',\"Driver:\", choices = [], multiple = True),\n            ui.input_action_button('refresh','Refresh', class_ = 'btn-success', style = 'color:' + text_colour  + '; background:' + f1_red + 'border: 1px solid ' + text_colour),\n            height = 600,\n            style = 'color:' + text_colour + '; background:' + f1_red,\n        ),\n        ui.output_text('ack'), width = '320px',\n        bg = f1_red,\n        fg = text_colour,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height = 80, style = 'background:' + main_bg_colour)),\n        ui.column(6, ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height = 80, style = 'text-align:center; line-height:2; font-size:1.6em; font-weight:bold; color:' + text_colour + '; background:' + main_bg_colour + '; border: 1px solid ' + f1_red),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height = 80, style = 'background:' + main_bg_colour))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour,\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('track_dominance_plot'),\n        height = 250,\n    ),\n    style = 'background:' + main_bg_colour\n)\n\ndef server(input, output, session):\n    def get_event_name(idx: int) -> str:\n        return events.event_name[idx]\n\n    def get_driver_name(idx: int) -> str:\n        return drivers.full_name[idx]\n\n    def get_driver_name_acronym(idx: int) -> str:\n        return drivers.name_acronym[idx]\n\n    def get_driver_num(idx: int) -> str:\n        return str(drivers.driver_number[idx])\n\n    def get_session_name(idx: int) -> str:\n        return sessions.session_name[idx]\n\n    def api_call(call_type: str, filters: list[str]) -> pd.DataFrame:\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1]  ==  '?':\n                call_str  +=  f\n            else:\n                call_str  +=  '&' + f\n\n        response = urlopen(call_str)\n        return pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n    def format_driver_names(driver_idx: int) -> str:\n        names = get_driver_name(driver_idx).split()\n        return '\\n'.join([names[0],' '.join(names[1:])]), get_driver_name_acronym(driver_idx)\n\n    def plot_names(front_name: str, back_name: str) -> plt.figure:\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_grey, clip_on = False, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 36, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'italic', fontfamily = 'sans-serif', fontsize = 13)\n        fig.patch.set_facecolor(main_bg_colour)\n        ax.set_facecolor(main_bg_colour)\n        ax.axis('off')\n        plt.tight_layout(pad = 0)\n        return fig\n\n    # number = index for driver in drivers\n    def driver_metric(metric_name, idx, func, minval, maxval, display_name = None) -> plt.figure:\n        fig, ax = plt.subplots()\n\n        if input.driver() !=  '' and len(car_data) > idx:\n            plot_data = car_data.copy()[idx]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color = str(selected_driver_colour[idx]), height = 0.1, align = 'center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_colour, fontstyle = 'oblique',fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 14)\n\n        ax.axis('off')\n        ax.tick_params(axis = 'x', colors = text_colour, direction = 'in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor(main_bg_colour)\n        fig.patch.set_facecolor(main_bg_colour)\n        plt.tight_layout()\n\n        return fig\n\n    \n    @render.text\n    def ack() -> str:\n        return 'Credit to the open-sourced OpenF1.org API (https://openf1.org/) for the Formula One\u00ae telemetry data used in this dashboard'\n\n    @reactive.effect\n    def update_event_list_with_year() -> None:\n        global events\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global location\n\n        selected_year = input.year()\n\n        #response = urlopen('https://api.openf1.org/v1/meetings?year = ' + selected_year)\n        #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n        df = api_call('meetings', ['year=' + str(selected_year)])\n\n        if df.shape[0] > 0:\n            try:\n                events = pd.concat([\n                    df.circuit_short_name,\n                    df.location,\n                    df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                    df.meeting_key,],axis = 1)\\\n                    .rename(columns = {'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n                ui.update_selectize(\"event\",choices = events.event_name)\n\n            except:\n                pass\n        else:\n            ui.update_selectize(\"event\",choices = [])\n\n            selected_year = None\n            events = None\n            selected_meeting_key = None\n\n        ui.update_selectize(\"session\",choices = [])\n        ui.update_selectize(\"driver\",choices = [])\n\n        sessions = None\n        selected_session_key = None\n        drivers = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        car_data = []\n        locations = []\n\n    @render.text\n    def header() -> str:\n        if input.event():\n            event_name = get_event_name(int(input.event()))\n            return input.year() + ' ' + event_name if event_name !=  None else input.year()\n\n    @render.text\n    def sub_head() -> str:\n        if input.session():\n            session_name = get_session_name(int(input.session()))\n            return session_name if session_name !=  None else ''\n\n    @reactive.effect\n    def update_session_list_with_event() -> None:\n        global sessions\n        global drivers\n        global fastest_lap_start\n        global fastest_lap_end\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global car_data\n        global locations\n\n        if input.year() and input.event():\n            selected_meeting_key = events.meeting_key[int(input.event())]\n\n            #response = urlopen('https://api.openf1.org/v1/sessions?year = ' + str(selected_year) + '&meeting_key = ' + str(selected_meeting_key))\n            #df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n            df = api_call('sessions', ['year=' + str(selected_year),'meeting_key=' + str(selected_meeting_key)])\n\n            sessions = pd.concat([\n                df.session_key,\n                df.date_start,\n                df.session_type,\n                df.session_name], axis = 1)\n\n            ui.update_selectize(\"session\",choices = sessions.session_name)\n        else:\n            ui.update_selectize(\"session\",choices = [])\n\n            sessions = None\n            selected_session_key = None\n\n        ui.update_selectize(\"driver\", choices = [])\n        drivers = None\n        car_data = []\n        selected_driver_colour = []\n        selected_driver_number = []\n        locations = []\n\n    @reactive.effect\n    def update_driver_list_with_session() -> None:\n        global sessions\n        global drivers\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n\n        if len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n\n            response = urlopen('https://api.openf1.org/v1/drivers?session_key=' + str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            if df.shape[0] > 0:\n                try:\n                    global drivers\n\n                    drivers = pd.concat([\n                        df.driver_number,\n                        df.name_acronym,\n                        df.full_name,\n                        df.team_name,\n                        df.team_colour,\n                        df.headshot_url,\n                        df.country_code], axis = 1)\n\n                    drivers['team_name'] = drivers['team_name'].fillna('#NA')\n                    ui.update_selectize(\"driver\", choices = drivers.full_name + \" (\" + drivers.team_name + \")\")\n                except:\n                    pass\n            else:\n                ui.update_selectize(\"driver\", choices = [])\n\n                drivers = []\n\n            car_data = []\n            selected_driver_number = []\n            selected_driver_colour = []\n            locations = []\n\n    @render.plot\n    #@reactive.event(input.refresh, ignore_none = False)\n    def driver0() -> plt.figure:\n        if input.driver():\n            front_name, back_name = format_driver_names(int(input.driver()[0]))\n            return plot_names(front_name, back_name)\n\n    @render.plot\n    #@reactive.event(input.refresh, ignore_none = False)\n    def driver1() -> plt.figure:\n        if len(input.driver())  ==  2:\n            front_name, back_name = format_driver_names(int(input.driver()[1]))\n            return plot_names(front_name, back_name)\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    @reactive.event(input.refresh, ignore_none = False)\n    def update_cardata_with_driver() -> None:\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        if input.driver():\n            print(get_driver_num(int(input.driver()[0])), input.driver(), selected_driver_number)\n\n        # helper functions to map speed to car x, y position on track and determine which car is faster (dominant)\n        def get_speed_from_car_data(idx: int, time: pd._libs.tslibs.timedeltas.Timedelta) -> float:\n            global car_data\n            before = car_data[idx].date < time\n            after = car_data[idx].date >=  time\n            speed_before = -1 if len(car_data[idx][before].speed)  ==  0 else car_data[idx][before].speed.iloc[-1]\n            speed_after = -1 if len(car_data[idx][after].speed)  ==  0 else car_data[idx][after].speed.iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        def calc_dominance(x: int, y: int, speed: float) -> int:\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist  ==  loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        # print(input.driver())\n        if len(input.driver()) > 0 and len(input.driver()) <=  2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            selected_driver_colour = ['#' + str(drivers.team_colour[int(d)]) if drivers.team_colour[int(d)] is not None else default_driver_colour for d in input.driver()]\n\n            # if both driver/team colour are missing | if both driver/team colour are the same\n            if len(input.driver()) > 1:\n                if  (selected_driver_colour[0]  ==  selected_driver_colour[1]): # or (selected_driver_colour[0] is None and selected_driver_colour[1] is None)\n                    selected_driver_colour = [default_driver0_colour, default_driver1_colour]\n\n            api_result_dfs = [api_call('laps',['session_key=' + str(selected_session_key),'driver_number=' + str(d)]) for d in selected_driver_number]\n\n            fastest_laps = [\n                df[(df.lap_duration  ==  df.lap_duration.min()) &\n                  -df.duration_sector_3.isna()]\n                for df in api_result_dfs]\n\n            car_data = []\n            locations = []\n            for i in range(len(fastest_laps)):\n                fastest_lap_start = fastest_laps[i].iloc[0,:].date_start\n                fastest_lap_duration = fastest_laps[i].iloc[0,:].lap_duration\n                fastest_lap_end = str(pd.to_datetime(fastest_lap_start) + pd.Timedelta(seconds = fastest_lap_duration))\n                fastest_lap_end = re.sub('\\\\s', 'T', fastest_lap_end)\n\n                car_data_df = api_call('car_data',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                car_data_df['date'] = pd.to_datetime(car_data_df.date, format = 'mixed') - pd.to_datetime(car_data_df.date,format = 'mixed').min()\n                car_data.append(car_data_df)\n\n                locations_df = api_call('location',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                locations_df['date'] = pd.to_datetime(locations_df.date, format = 'mixed') - pd.to_datetime(locations_df.date,format = 'mixed').min()\n                start_x = locations_df[locations_df.date  ==  locations_df.date.min()].x.iloc[0]\n                start_y = locations_df[locations_df.date  ==  locations_df.date.min()].y.iloc[0]\n                locations_df['x'] = locations_df.x - start_x\n                locations_df['y'] = locations_df.y - start_y\n                locations.append(locations_df)\n\n                locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        #print(pt.x, pt.y, pt.date)\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data(j, time)\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed\n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth twice\n                smooth = 12\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n                smooth = 8\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance  ==  0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance  ==  1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n        else:\n            selected_driver_number = []\n            selected_driver_colour = []\n            car_data = []\n            locations = []\n\n\n        #[print(c.driver_number.unique()) for c in car_data]\n        # print(len(car_data), [c.shape for c in car_data])\n\n    @render_widget\n    @reactive.event(input.refresh, ignore_none = False)\n    def tele_plot() -> go.Figure:\n        fig = go.Figure()\n\n        if input.driver() !=  '':\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    #data['date'] = (pd.to_datetime(data.date, format = 'mixed') - pd.to_datetime(data.date,format = 'mixed').min()).astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace = True)\n                    data['date'] = pd.to_datetime(data.date,format = '%M:%S.%f')\n                    data.dropna(inplace = True)\n\n                    dr_mask = drivers.driver_number  ==  selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<= .[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n\n                    fig.add_trace(go.Scatter(x = data.date, y = data.speed, line = (dict(color = str(selected_driver_colour[i]))) , name = list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template = 'plotly_dark',\n            plot_bgcolor = 'black',\n            showlegend = True,\n            legend = dict(yanchor = 'bottom',y = 0.01,xanchor = 'right',x = 0.99,orientation = 'h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text = 'Speed / mph')\n        return fig\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_throttle() -> plt.figure:\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_throttle() -> plt.figure:\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_brake() -> plt.figure:\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_brake() -> plt.figure:\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_topspeed() -> plt.figure:\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_topspeed() -> plt.figure:\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def track_dominance_plot() -> go.Figure:\n        global locations\n\n        fig, ax = plt.subplots()\n\n        if input.driver() !=  '' and len(locations) > 0:\n            plot_data = locations.copy()[0]\n\n            # draw driver0\n            ax.plot(plot_data.x + 70, plot_data.y - 350, c = text_colour, ls = '-', lw = 10, alpha = 0.15)\n            ax.plot(plot_data.x, plot_data.y, c = track_grey, ls = '-', lw = 6)\n            ax.plot(plot_data.x, plot_data.y, c = selected_driver_colour[0], ls = '-', lw = 4)\n\n            # work out segments for drawing\n            if len(plot_data.colour.unique()) > 1:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] !=  plot_data.loc[i + 1, 'dominance']):\n                        current_segment  +=  1\n\n                # only draw driver1 dominant segments\n                plot_data_c = plot_data[plot_data.dominance  ==  1]\n                for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment  ==  seg]\n                        if plot_segment.shape[0] > 1:\n                            # ax.plot(plot_segment.x, plot_segment.y, c = tracker_border_colour_driver1, ls = '-', lw = 6)\n                            ax.plot(plot_segment.x, plot_segment.y, c = selected_driver_colour[1], ls = '-', lw = 4)\n\n            ax.plot(plot_data.x[0], plot_data.y[0], c = track_border_colour, marker = 'o', markersize = 8)\n            ax.plot(plot_data.x[0], plot_data.y[0], c = text_colour, marker = 'o', markersize = 6)\n\n        ax.axis('off')\n        ax.set_facecolor(main_bg_colour)\n\n        fig.patch.set_facecolor(main_bg_colour)\n        return fig\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240331_5.py", "content": "from shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom urllib.request import urlopen\nfrom scipy import stats\nimport pandas as pd\nimport json\nimport re\n\n# declare variables\n# colours\nf1_red: str = '#E6002B'\nmain_bg_colour: str = '#111111'\ntext_colour: str = '#FFFFFF'\ntext_grey: str = '#AAAAAA'\ndefault_driver0_colour: str = f1_red # '#1b14e3'\ndefault_driver1_colour: str = text_colour\ndefault_driver_colour: str = '#ae89c4'\ntrack_border_colour: str = '#000000'\ntrack_grey: str = '#001010'\n# tracker_border_colour_driver1: str = text_colour\n\n# lists for drop down selections\nyears: list[str] = ['2023','2024']\nevents: list[str] = []\nsessions: list[str] = []\ndrivers: list[str] = []\n\n# selected from drop down selections\nselected_year: str = None\nselected_meeting_key: str = None\nselected_session_key: str = None\nselected_driver_number: list[str] = []\nselected_driver_colour: list[str] = []\n\n# telemetry data downloaded retrieved\ncar_data: list[pd.DataFrame] = []\nlocations: list[pd.DataFrame] = []\n\n\n# Shiny app layout\napp_ui: ui.page_sidebar = ui.page_sidebar(\n    ui.sidebar(\n        ui.card(\n            ui.input_selectize(\"year\",\"Year: \", choices = years, selected = '2024'),\n            ui.input_selectize(\"event\",\"Event:\", choices = [], selected = 0),\n            ui.input_selectize(\"session\",\"Session:\", choices = []),\n            ui.input_selectize('driver',\"Driver:\", choices = [], multiple = True),\n            ui.input_action_button('refresh','Refresh', class_ = 'btn-success', style = 'color:' + text_colour  + '; background:' + f1_red + 'border: 1px solid ' + text_colour),\n            height = 600,\n            style = 'color:' + text_colour + '; background:' + f1_red,\n        ),\n        ui.output_text('ack'), width = '320px',\n        bg = f1_red,\n        fg = text_colour,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height = 80, style = 'background:' + main_bg_colour)),\n        ui.column(6, ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height = 80, style = 'text-align:center; line-height:2; font-size:1.6em; font-weight:bold; color:' + text_colour + '; background:' + main_bg_colour + '; border: 1px solid ' + f1_red),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height = 80, style = 'background:' + main_bg_colour))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour,\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('track_dominance_plot'),\n        height = 250,\n    ),\n    style = 'background:' + main_bg_colour\n)\n\ndef server(input, output, session):\n    def reset_variables(\n        reset_events: bool = False,\n        reset_sessions: bool = False,\n        reset_drivers: bool = False,\n        reset_selected_year:bool = False,\n        reset_selected_meeting_key:bool = False,\n        reset_selected_session_key: bool = False,\n        reset_selected_driver_number: bool = False,\n        reset_selected_driver_colour: bool = False,\n        reset_car_data:bool = False,\n        reset_locations:bool = False\n    ):\n        global events\n        global sessions\n        global drivers\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n        \n        events = [] if reset_events else events\n        sessions = [] if reset_sessions else sessions\n        drivers = [] if reset_drivers else drivers\n\n        selected_year = None if reset_selected_year else selected_year\n        selected_meeting_key = None if reset_selected_meeting_key else selected_meeting_key\n        selected_session_key = None if reset_selected_session_key else selected_session_key\n        selected_driver_number = [] if reset_selected_driver_number else selected_driver_number\n        selected_driver_colour = [] if reset_selected_driver_colour else selected_driver_colour\n\n        car_data = [] if reset_car_data else car_data\n        locations = [] if reset_locations else locations\n\n    def get_event_name(idx: int) -> str:\n        return events.event_name[idx]\n\n    def get_driver_name(idx: int) -> str:\n        return drivers.full_name[idx]\n\n    def get_driver_name_acronym(idx: int) -> str:\n        return drivers.name_acronym[idx]\n\n    def get_driver_num(idx: int) -> str:\n        return str(drivers.driver_number[idx])\n\n    def get_session_name(idx: int) -> str:\n        return sessions.session_name[idx]\n\n    def api_call(call_type: str, filters: list[str]) -> pd.DataFrame:\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1]  ==  '?':\n                call_str  +=  f\n            else:\n                call_str  +=  '&' + f\n\n        response = urlopen(call_str)\n        df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n        assert df.shape[0] > 0 and df.shape[1] > 0, \"result pd.DataFrame is empty\"\n\n        return df \n\n    def format_driver_names(driver_idx: int) -> str:\n        names = get_driver_name(driver_idx).split()\n        return '\\n'.join([names[0],' '.join(names[1:])]), get_driver_name_acronym(driver_idx)\n\n    def plot_names(front_name: str, back_name: str) -> plt.figure:\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_grey, clip_on = False, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 36, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'italic', fontfamily = 'sans-serif', fontsize = 13)\n        fig.patch.set_facecolor(main_bg_colour)\n        ax.set_facecolor(main_bg_colour)\n        ax.axis('off')\n        plt.tight_layout(pad = 0)\n        return fig\n    \n    # number = index for driver in drivers\n    def driver_metric(metric_name, idx, func, minval, maxval, display_name = None) -> plt.figure:\n        fig, ax = plt.subplots()\n\n        if len(input.driver()) > 0 and len(car_data) > idx:\n            plot_data = car_data.copy()[idx]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color = str(selected_driver_colour[idx]), height = 0.1, align = 'center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_colour, fontstyle = 'oblique',fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 14)\n\n        ax.axis('off')\n        ax.tick_params(axis = 'x', colors = text_colour, direction = 'in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor(main_bg_colour)\n        fig.patch.set_facecolor(main_bg_colour)\n        plt.tight_layout()\n\n        return fig\n\n    @reactive.effect\n    def update_event_list_with_year() -> None:\n        global events\n        global selected_year\n\n        # updatinig event drop-drop lists\n        # reset drop-down lists\n        ui.update_selectize(\"event\",choices = [])\n        ui.update_selectize(\"session\",choices = [])\n        ui.update_selectize(\"driver\",choices = [])\n\n        # reset variables for data and what are selected in drop-down lists\n        reset_variables(reset_selected_year = None, reset_selected_meeting_key = None, reset_events = True, reset_sessions = True, reset_selected_session_key = True, reset_drivers = True, reset_selected_driver_number = True, reset_selected_driver_colour = True, reset_car_data = True, reset_locations = True )\n\n        # get year from drop-down list\n        selected_year = input.year()\n\n        # get events data\n        # update event drop-down list\n        df = api_call('meetings', ['year=' + str(selected_year)])\n        \n        try:\n            events = pd.concat([\n                df.circuit_short_name,\n                df.location,\n                df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                df.meeting_key,],axis = 1)\\\n                .rename(columns = {'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n            ui.update_selectize(\"event\",choices = events.event_name)\n        except:\n            print(f\"Likely to be data error when retrieving event data from api_call: year={str(selected_year)}. Dataframe returned has {df.shape[0]} rows and {df.shape[1]} columns\")\n\n    @reactive.effect\n    def update_session_list_with_event() -> None:\n        global sessions\n        global selected_meeting_key\n\n        # updating session drop-down list\n        # reset drop-down lists except for year and event\n        ui.update_selectize(\"driver\", choices = [])\n        ui.update_selectize(\"session\",choices = [])\n\n        # reset variables\n        reset_variables(reset_selected_meeting_key = True, reset_sessions = True, reset_selected_session_key = True, reset_drivers = True, reset_selected_driver_colour = True, reset_selected_driver_number = True, reset_car_data = True, reset_locations = True)\n\n        # check drop-down lists year and event for values\n        # get session data\n        # update session drop-drop list\n        if len(input.year()) > 0 and len(input.event()) > 0:\n            selected_meeting_key = events.meeting_key[int(input.event())]\n\n            df = api_call('sessions', ['year=' + str(selected_year),'meeting_key=' + str(selected_meeting_key)])\n\n            try:\n                sessions = pd.concat([\n                    df.session_key,\n                    df.date_start,\n                    df.session_type,\n                    df.session_name], axis = 1)\n\n                ui.update_selectize(\"session\",choices = sessions.session_name)\n            except:\n                print(f\"Likely to be data error when retrieving session data from api_call: year={str(selected_year)}&meeting_key={str(selected_meeting_key)}. Dataframe returned has {df.shape[0]} rows and {df.shape[1]} columns\")\n\n    @reactive.effect\n    def update_driver_list_with_session() -> None:\n        global drivers\n        global selected_session_key\n\n        # updating driver drop-down list\n        # reset drop-down lists except for year, event and session\n        ui.update_selectize(\"driver\", choices = [])\n\n        # reset variables\n        reset_variables(reset_drivers = True, reset_selected_driver_number = True, reset_selected_driver_colour = True, reset_car_data = True, reset_locations = True)\n\n        if len(input.year()) > 0 and len(input.event()) and len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n\n            response = urlopen('https://api.openf1.org/v1/drivers?session_key=' + str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            try:\n                drivers = pd.concat([\n                    df.driver_number,\n                    df.name_acronym,\n                    df.full_name,\n                    df.team_name,\n                    df.team_colour,\n                    df.headshot_url,\n                    df.country_code], axis = 1)\n                drivers['team_name'] = drivers['team_name'].fillna('#NA')\n\n                ui.update_selectize(\"driver\", choices = drivers.full_name + \" (\" + drivers.team_name + \")\")\n            except:\n                print(f\"Likely to be data error when retrieving driver data from api_call: session={str(selected_session_key)}. Dataframe returned has {df.shape[0]} rows and {df.shape[1]} columns\")\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    @reactive.event(input.refresh, ignore_none = False)\n    def update_cardata_with_driver() -> None:\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        # helper functions to map speed to car x, y position on track and determine track dominance at each trck position\n        # get car speed at specific time\n        def get_speed_from_car_data(idx: int, time: pd._libs.tslibs.timedeltas.Timedelta) -> float:\n            global car_data\n            before = car_data[idx].date - car_data[idx].date.min() < time\n            after = car_data[idx].date - car_data[idx].date.min() >=  time\n            speed_before = -1 if len(car_data[idx][before].speed)  ==  0 else car_data[idx][before].speed.iloc[-1]\n            speed_after = -1 if len(car_data[idx][after].speed)  ==  0 else car_data[idx][after].speed.iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # Work out track dominance at specific position x, y between two cars\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        # x and y are car0 (driver0) position coordinates\n        # compare with car1's (driver1's) speed at the closest x, y position\n        def calc_dominance(x: int, y: int, speed: float) -> int:\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist  ==  loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        def get_fastest_lap(df: pd.DataFrame) -> pd.DataFrame:\n            # shortest lap time + has a sector 3 time (finished the lap)\n            return df[(df.lap_duration  ==  df.lap_duration.min()) & -df.duration_sector_3.isna()]\n\n        def get_lap_start_time(df: pd.DataFrame) -> str:\n            return df.iloc[0].date_start\n\n        def get_lap_end_time(df:pd.DataFrame) -> str:\n            lap_start = get_lap_start_time(df)\n            lap_duration = df.iloc[0,:].lap_duration\n            lap_end = str(pd.to_datetime(lap_start) + pd.Timedelta(seconds = lap_duration))\n            return re.sub('\\\\s', 'T', lap_end)\n\n        # smooth dominance data that are stored in locations[0] (driver0's location data\n        def smooth_dominance(smooth: int) -> None:\n            global locations\n            for i in range(locations[0].shape[0]):\n                if i + smooth < locations[0].shape[0]:\n                    locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n        # Only update if 1 or 2 drivers are chosen\n        if len(input.driver()) > 0 and len(input.driver()) <=  2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            # store previously selected drivers\n            old_selected_driver_number = selected_driver_number\n\n            # update selected driver variables\n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            # assign team colour to driver or use default colour if team/team colour is none\n            selected_driver_colour = ['#' + str(drivers.team_colour[int(d)]) if drivers.team_colour[int(d)] is not None else default_driver_colour for d in input.driver()]\n\n            # if there are more than one driver and driver/team colour assigned are the same\n            # assigned driver colours to be default driver0 and driver1 colours\n            if len(input.driver()) > 1 and (selected_driver_colour[0]  ==  selected_driver_colour[1]):\n                selected_driver_colour = [default_driver0_colour, default_driver1_colour]\n\n            # get car_data and location_data\n            temp_car_data = []\n            temp_locations = []\n            for i, d in enumerate(selected_driver_number):\n                if old_selected_driver_number == [] or selected_driver_number[i] not in old_selected_driver_number:\n                    api_result_df = api_call('laps',['session_key=' + str(selected_session_key),'driver_number=' + str(selected_driver_number[i])])\n\n                    fastest_lap = get_fastest_lap(api_result_df)\n                    fastest_lap_start = get_lap_start_time(fastest_lap)\n                    fastest_lap_end = get_lap_end_time(fastest_lap)\n\n                    car_data_df = api_call('car_data',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                    car_data_df['date'] = pd.to_datetime(car_data_df.date, format = 'mixed') - pd.to_datetime(car_data_df.date,format = 'mixed').min()\n                    temp_car_data.append(car_data_df)\n\n                    locations_df = api_call('location',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                    locations_df['date'] = pd.to_datetime(locations_df.date, format = 'mixed') - pd.to_datetime(locations_df.date,format = 'mixed').min()\n                    start_x = locations_df[locations_df.date  ==  locations_df.date.min()].x.iloc[0]\n                    start_y = locations_df[locations_df.date  ==  locations_df.date.min()].y.iloc[0]\n                    locations_df['x'] = locations_df.x - start_x\n                    locations_df['y'] = locations_df.y - start_y\n                    temp_locations.append(locations_df)\n                else:\n                    temp_car_data.append(car_data.copy()[old_selected_driver_number.index(selected_driver_number[i])])\n                    temp_locations.append(locations.copy()[old_selected_driver_number.index(selected_driver_number[i])])\n                    print('copy old into temp data')\n\n            car_data = temp_car_data.copy()\n            locations = temp_locations.copy()\n\n            # initialize colour attribute in locations[0] for track dominance plotting\n            # stored track dominance information only in locations[0] (driver0's location table) plotting\n            locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        #print(pt.x, pt.y, pt.date)\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data(j, time)\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed\n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth dominance result twice\n                '''smooth = 12\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]'''\n                smooth_dominance(smooth = 12)\n\n                '''smooth = 8\n                for i in range(locations[0].shape[0]):\n                    if i + smooth < locations[0].shape[0]:\n                        locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]'''\n                smooth_dominance(smooth = 8)\n\n                # assign driver colour to locations on track to represent track dominance\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance  ==  0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance  ==  1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n\n    # header elements\n    @render.text\n    def header() -> str:\n        if input.event():\n            event_name = get_event_name(int(input.event()))\n            return input.year() + ' ' + event_name if event_name !=  None else input.year()\n\n    @render.text\n    def sub_head() -> str:\n        if input.session():\n            session_name = get_session_name(int(input.session()))\n            return session_name if session_name !=  None else ''\n\n    @render.plot\n    def driver0() -> plt.figure:\n        if input.driver():\n            front_name, back_name = format_driver_names(int(input.driver()[0]))\n            return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver1() -> plt.figure:\n        if len(input.driver())  ==  2:\n            front_name, back_name = format_driver_names(int(input.driver()[1]))\n            return plot_names(front_name, back_name)\n\n    # telemetry plot\n    @render_widget\n    @reactive.event(input.refresh, ignore_none = False)\n    def tele_plot() -> go.Figure:\n        fig = go.Figure()\n\n        if input.driver() !=  '':\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace = True)\n                    data['date'] = pd.to_datetime(data.date,format = '%M:%S.%f')\n                    data.dropna(inplace = True)\n\n                    dr_mask = drivers.driver_number  ==  selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<= .[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n\n                    fig.add_trace(go.Scatter(x = data.date, y = data.speed, line = (dict(color = str(selected_driver_colour[i]))) , name = list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template = 'plotly_dark',\n            plot_bgcolor = 'black',\n            showlegend = True,\n            legend = dict(yanchor = 'bottom',y = 0.01,xanchor = 'right',x = 0.99,orientation = 'h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text = 'Speed / mph')\n        return fig\n\n    # driver metrics\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_throttle() -> plt.figure:\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_throttle() -> plt.figure:\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_brake() -> plt.figure:\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_brake() -> plt.figure:\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_topspeed() -> plt.figure:\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_topspeed() -> plt.figure:\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    # track dominance\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def track_dominance_plot() -> go.Figure:\n        global locations\n\n        fig, ax = plt.subplots()\n\n        if len(input.driver()) > 0 and len(locations) > 0:\n            plot_data = locations.copy()[0]\n\n            # draw driver0\n            ax.plot(plot_data.x + 50, plot_data.y - 250, c = text_colour, ls = '-', lw = 10, alpha = 0.15)\n            ax.plot(plot_data.x, plot_data.y, c = track_grey, ls = '-', lw = 6)\n            ax.plot(plot_data.x, plot_data.y, c = selected_driver_colour[0], ls = '-', lw = 4)\n\n            # work out segments for drawing driver1 dominant parts\n            if len(plot_data.colour.unique()) > 1:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] !=  plot_data.loc[i + 1, 'dominance']):\n                        current_segment  +=  1\n\n                # only draw driver1 dominant segments\n                plot_data_c = plot_data[plot_data.dominance  ==  1]\n                for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment  ==  seg]\n                        if plot_segment.shape[0] > 1:\n                            # ax.plot(plot_segment.x, plot_segment.y, c = tracker_border_colour_driver1, ls = '-', lw = 6)\n                            ax.plot(plot_segment.x, plot_segment.y, c = selected_driver_colour[1], ls = '-', lw = 4)\n\n            ax.plot(plot_data.x[0], plot_data.y[0], c = track_border_colour, marker = 'o', markersize = 8)\n            ax.plot(plot_data.x[0], plot_data.y[0], c = text_colour, marker = 'o', markersize = 6)\n\n        ax.axis('off')\n        ax.set_facecolor(main_bg_colour)\n\n        fig.patch.set_facecolor(main_bg_colour)\n        return fig\n    \n    @render.text\n    def ack() -> str:\n        return 'Credit to the open-sourced OpenF1.org API (https://openf1.org/) for the Formula One\u00ae telemetry data used in this dashboard'\n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "backup/f1_telemetry_20240405_1.py", "content": "from shiny import App, reactive, render, ui\nfrom shinywidgets import render_widget, output_widget\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom urllib.request import urlopen\nfrom scipy import stats\nimport pandas as pd\nimport json\nimport re\n\n# declare variables\n# colours\nf1_red: str = '#E6002B'\nmain_bg_colour: str = '#111111'\ntext_colour: str = '#FFFFFF'\ntext_grey: str = '#AAAAAA'\ndefault_driver0_colour: str = f1_red # '#1b14e3'\ndefault_driver1_colour: str = text_colour\ndefault_driver_colour: str = '#ae89c4'\ntrack_border_colour: str = '#000000'\ntrack_grey: str = '#001010'\n# tracker_border_colour_driver1: str = text_colour\n\n# lists for drop down selections\nyears: list[str] = ['2023','2024']\nevents: list[str] = []\nsessions: list[str] = []\ndrivers: list[str] = []\n\n# selected from drop down selections\nselected_year: str = None\nselected_meeting_key: str = None\nselected_session_key: str = None\nselected_driver_number: list[str] = []\nselected_driver_colour: list[str] = []\n\n# telemetry data downloaded retrieved\ncar_data: list[pd.DataFrame] = []\nlocations: list[pd.DataFrame] = []\n\n\n# Shiny app layout\napp_ui: ui.page_sidebar = ui.page_sidebar(\n    ui.sidebar(\n        ui.card(\n            ui.input_selectize(\"year\",\"Year: \", choices = years, selected = '2024'),\n            ui.input_selectize(\"event\",\"Event:\", choices = [], selected = 0),\n            ui.input_selectize(\"session\",\"Session:\", choices = []),\n            ui.input_selectize('driver',\"Driver:\", choices = [], multiple = True),\n            ui.input_action_button('refresh','Refresh', class_ = 'btn-success', style = 'color:' + text_colour  + '; background:' + f1_red + 'border: 1px solid ' + text_colour),\n            height = 600,\n            style = 'color:' + text_colour + '; background:' + f1_red,\n        ),\n        ui.output_text('ack'), width = '320px',\n        bg = f1_red,\n        fg = text_colour,\n    ),\n    ui.row(\n        ui.column(3, ui.card(ui.output_plot(\"driver0\"),height = 80, style = 'background:' + main_bg_colour)),\n        ui.column(6, ui.output_text(\"header\"),ui.output_text(\"sub_head\"), height = 80, style = 'text-align:center; line-height:2; font-size:1.6em; font-weight:bold; color:' + text_colour + '; background:' + main_bg_colour + '; border: 1px solid ' + f1_red),\n        ui.column(3, ui.card(ui.output_plot(\"driver1\"),height = 80, style = 'background:' + main_bg_colour))\n    ),\n    ui.row(\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver0_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver0_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour,\n            )\n        ),\n        ui.column(6, output_widget(\"tele_plot\")),\n        ui.column(\n            3,\n            ui.card(\n                ui.card(ui.output_plot(\"driver1_throttle\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_brake\"), height = 100, style = 'background:' + main_bg_colour),\n                ui.card(ui.output_plot(\"driver1_topspeed\"), height = 100, style = 'background:' + main_bg_colour),\n            height = 400,\n            style = 'background:' + main_bg_colour\n            )\n        ),\n    ),\n    ui.row(\n        ui.output_plot('track_dominance_plot'),\n        height = 250,\n    ),\n    style = 'background:' + main_bg_colour\n)\n\ndef server(input, output, session):\n    def reset_variables(\n        reset_events: bool = False,\n        reset_sessions: bool = False,\n        reset_drivers: bool = False,\n        reset_selected_year:bool = False,\n        reset_selected_meeting_key:bool = False,\n        reset_selected_session_key: bool = False,\n        reset_selected_driver_number: bool = False,\n        reset_selected_driver_colour: bool = False,\n        reset_car_data:bool = False,\n        reset_locations:bool = False\n    ):\n        global events\n        global sessions\n        global drivers\n        global selected_year\n        global selected_meeting_key\n        global selected_session_key\n        global selected_driver_number\n        global selected_driver_colour\n        global car_data\n        global locations\n        \n        events = [] if reset_events else events\n        sessions = [] if reset_sessions else sessions\n        drivers = [] if reset_drivers else drivers\n\n        selected_year = None if reset_selected_year else selected_year\n        selected_meeting_key = None if reset_selected_meeting_key else selected_meeting_key\n        selected_session_key = None if reset_selected_session_key else selected_session_key\n        selected_driver_number = [] if reset_selected_driver_number else selected_driver_number\n        selected_driver_colour = [] if reset_selected_driver_colour else selected_driver_colour\n\n        car_data = [] if reset_car_data else car_data\n        locations = [] if reset_locations else locations\n\n    def get_event_name(idx: int) -> str:\n        return events.event_name[idx]\n\n    def get_driver_name(idx: int) -> str:\n        return drivers.full_name[idx]\n\n    def get_driver_name_acronym(idx: int) -> str:\n        return drivers.name_acronym[idx]\n\n    def get_driver_num(idx: int) -> str:\n        return str(drivers.driver_number[idx])\n\n    def get_session_name(idx: int) -> str:\n        return sessions.session_name[idx]\n\n    def api_call(call_type: str, filters: list[str]) -> pd.DataFrame:\n        call_str = 'https://api.openf1.org/v1/' + call_type + '?'\n\n        for f in filters:\n            if call_str[-1]  ==  '?':\n                call_str  +=  f\n            else:\n                call_str  +=  '&' + f\n\n        response = urlopen(call_str)\n        df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n        assert df.shape[0] > 0 and df.shape[1] > 0, \"result pd.DataFrame is empty\"\n\n        return df \n\n    def format_driver_names(driver_idx: int) -> str:\n        names = get_driver_name(driver_idx).split()\n        return '\\n'.join([names[0],' '.join(names[1:])]), get_driver_name_acronym(driver_idx)\n\n    def plot_names(front_name: str, back_name: str) -> plt.figure:\n        fig, ax = plt.subplots()\n        ax.text(0, 1, back_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_grey, clip_on = False, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 36, alpha = 0.2)\n        ax.text(1, 1, front_name, verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'italic', fontfamily = 'sans-serif', fontsize = 13)\n        fig.patch.set_facecolor(main_bg_colour)\n        ax.set_facecolor(main_bg_colour)\n        ax.axis('off')\n        plt.tight_layout(pad = 0)\n        return fig\n    \n    # number = index for driver in drivers\n    def driver_metric(metric_name, idx, func, minval, maxval, display_name = None) -> plt.figure:\n        fig, ax = plt.subplots()\n\n        if len(input.driver()) > 0 and len(car_data) > idx:\n            plot_data = car_data.copy()[idx]\n\n            #print(plot_data[['throttle']].mean(), selected_driver_colour[num])\n            metric = func(plot_data[[metric_name]]) #plot_data[[metric_name]].mean()\n            ax.barh(0.1, metric, color = str(selected_driver_colour[idx]), height = 0.1, align = 'center')\n            ax.text(maxval, 0.3, str(int(round(metric.iloc[0], 0))), verticalalignment = 'top', horizontalalignment = 'right', color = text_colour, fontstyle = 'oblique', fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 22)\n            display_name = metric_name if display_name is None else display_name\n            ax.text(0, 0.3, display_name, verticalalignment = 'top', horizontalalignment = 'left', color = text_colour, fontstyle = 'oblique',fontweight = 'bold', fontfamily = 'sans-serif', fontsize = 14)\n\n        ax.axis('off')\n        ax.tick_params(axis = 'x', colors = text_colour, direction = 'in')\n        ax.yaxis.set_visible(False)\n        ax.set_xticks([])\n        ax.set_xlim(minval, maxval)\n        ax.set_ylim(0,0.3)\n        ax.set_facecolor(main_bg_colour)\n        fig.patch.set_facecolor(main_bg_colour)\n        plt.tight_layout()\n\n        return fig\n\n    @reactive.effect\n    def update_event_list_with_year() -> None:\n        global events\n        global selected_year\n\n        # updatinig event drop-drop lists\n        # reset drop-down lists\n        ui.update_selectize(\"event\",choices = [])\n        ui.update_selectize(\"session\",choices = [])\n        ui.update_selectize(\"driver\",choices = [])\n\n        # reset variables for data and what are selected in drop-down lists\n        reset_variables(reset_selected_year = None, reset_selected_meeting_key = None, reset_events = True, reset_sessions = True, reset_selected_session_key = True, reset_drivers = True, reset_selected_driver_number = True, reset_selected_driver_colour = True, reset_car_data = True, reset_locations = True )\n\n        # get year from drop-down list\n        selected_year = input.year()\n\n        # get events data\n        # update event drop-down list\n        df = api_call('meetings', ['year=' + str(selected_year)])\n        \n        try:\n            events = pd.concat([\n                df.circuit_short_name,\n                df.location,\n                df.meeting_official_name.str.extract('FORMULA 1 (.*) 202.'),\n                df.meeting_key,],axis = 1)\\\n                .rename(columns = {'circuit_short_name':'circuit_name','location':'location_name',0:'event_name'})\n\n            ui.update_selectize(\"event\",choices = events.event_name)\n        except:\n            print(f\"Likely to be data error when retrieving event data from api_call: year={str(selected_year)}. Dataframe returned has {df.shape[0]} rows and {df.shape[1]} columns\")\n\n    @reactive.effect\n    def update_session_list_with_event() -> None:\n        global sessions\n        global selected_meeting_key\n\n        # updating session drop-down list\n        # reset drop-down lists except for year and event\n        ui.update_selectize(\"driver\", choices = [])\n        ui.update_selectize(\"session\",choices = [])\n\n        # reset variables\n        reset_variables(reset_selected_meeting_key = True, reset_sessions = True, reset_selected_session_key = True, reset_drivers = True, reset_selected_driver_colour = True, reset_selected_driver_number = True, reset_car_data = True, reset_locations = True)\n\n        # check drop-down lists year and event for values\n        # get session data\n        # update session drop-drop list\n        if len(input.year()) > 0 and len(input.event()) > 0:\n            selected_meeting_key = events.meeting_key[int(input.event())]\n\n            df = api_call('sessions', ['year=' + str(selected_year),'meeting_key=' + str(selected_meeting_key)])\n\n            try:\n                sessions = pd.concat([\n                    df.session_key,\n                    df.date_start,\n                    df.session_type,\n                    df.session_name], axis = 1)\n\n                ui.update_selectize(\"session\",choices = sessions.session_name)\n            except:\n                print(f\"Likely to be data error when retrieving session data from api_call: year={str(selected_year)}&meeting_key={str(selected_meeting_key)}. Dataframe returned has {df.shape[0]} rows and {df.shape[1]} columns\")\n\n    @reactive.effect\n    def update_driver_list_with_session() -> None:\n        global drivers\n        global selected_session_key\n\n        # updating driver drop-down list\n        # reset drop-down lists except for year, event and session\n        ui.update_selectize(\"driver\", choices = [])\n\n        # reset variables\n        reset_variables(reset_drivers = True, reset_selected_driver_number = True, reset_selected_driver_colour = True, reset_car_data = True, reset_locations = True)\n\n        if len(input.year()) > 0 and len(input.event()) and len(input.session()) > 0:\n            selected_session_key = sessions.session_key[int(input.session())]\n\n            response = urlopen('https://api.openf1.org/v1/drivers?session_key=' + str(selected_session_key))\n            df = pd.DataFrame(json.loads(response.read().decode('utf-8')))\n\n            try:\n                drivers = pd.concat([\n                    df.driver_number,\n                    df.name_acronym,\n                    df.full_name,\n                    df.team_name,\n                    df.team_colour,\n                    df.headshot_url,\n                    df.country_code], axis = 1)\n                drivers['team_name'] = drivers['team_name'].fillna('#NA')\n\n                ui.update_selectize(\"driver\", choices = drivers.full_name + \" (\" + drivers.team_name + \")\")\n            except:\n                print(f\"Likely to be data error when retrieving driver data from api_call: session={str(selected_session_key)}. Dataframe returned has {df.shape[0]} rows and {df.shape[1]} columns\")\n\n    # get car_data for fastest lap for selected driver\n    @reactive.effect\n    @reactive.event(input.refresh, ignore_none = False)\n    def update_cardata_with_driver() -> None:\n        global car_data\n        global locations\n        global selected_driver_number\n        global selected_driver_colour\n\n        # helper functions to map speed to car x, y position on track and determine track dominance at each trck position\n        # get numerical attribute at specific time, e.g. speed\n        def get_attr_from_car_data_datetime(car_data: pd.DataFrame, time: pd._libs.tslibs.timedeltas.Timedelta, attr:str) -> float:\n            assert car_data[attr].dtypes in ['int64', 'float64']\n            \n            before = car_data.date - car_data.date.min() < time\n            after = car_data.date - car_data.date.min() >=  time\n            speed_before = -1 if len(car_data[before][attr])  ==  0 else car_data[before][attr].iloc[-1]\n            speed_after = -1 if len(car_data[after][attr])  ==  0 else car_data[after][attr].iloc[0]\n            return (speed_before + speed_after) / 2\n\n        # Work out track dominance at specific position x, y between two cars\n        # return 0 = first car is faster\n        # return 1 = second car is faster\n        # return -1 = same speed\n        # x and y are car0 (driver0) position coordinates\n        # compare with car1's (driver1's) speed at the closest x, y position\n        def calc_dominance(x: int, y: int, speed: float) -> int:\n            global locations\n            loc1 = locations[1].copy()\n            loc1['dist'] = abs(loc1.x - x) + abs(loc1.y - y)\n            second_car_speed = loc1[loc1.dist  ==  loc1.dist.min()].speed.iloc[0]\n            if speed > second_car_speed:\n                return 0\n            elif speed < second_car_speed:\n                return 1\n            else:\n                return -1\n\n        def get_fastest_lap(laps: pd.DataFrame) -> pd.DataFrame:\n            # shortest lap time + has a sector 3 time (finished the lap)\n            return laps[(laps.lap_duration  ==  laps.lap_duration.min()) & -laps.duration_sector_3.isna()]\n\n        def get_lap_start_time(lap: pd.DataFrame) -> str:\n            return lap.iloc[0].date_start\n\n        def get_lap_end_time(lap:pd.DataFrame) -> str:\n            lap_start = get_lap_start_time(lap)\n            lap_duration = lap.iloc[0,:].lap_duration\n            lap_end = str(pd.to_datetime(lap_start) + pd.Timedelta(seconds = lap_duration))\n            return re.sub('\\\\s', 'T', lap_end)\n\n        def map_car_data_attr_to_location_xy(location:pd.DataFrame, car_data:pd.DataFrame, attr:str) -> pd.DataFrame:\n            location[attr] = -1.0\n            for i in range(location.shape[0]):\n                time = location.iloc[i,:].date\n                location.loc[i,attr] = get_attr_from_car_data_datetime(car_data, time, 'speed')\n            return location\n\n        # smooth dominance data that are stored in locations[0] (driver0's location data\n        def smooth_dominance(smooth: int) -> None:\n            global locations\n            for i in range(locations[0].shape[0]):\n                if i + smooth < locations[0].shape[0]:\n                    locations[0].loc[i, 'dominance'] = stats.mode(locations[0].loc[i:i + smooth, 'dominance'])[0]\n\n        # Only update if 1 or 2 drivers are chosen\n        if len(input.driver()) > 0 and len(input.driver()) <=  2:\n\n            fastest_lap_start = None\n            fastest_lap_end = None\n\n            # store previously selected drivers\n            old_selected_driver_number = selected_driver_number\n\n            # update selected driver variables\n            selected_driver_number = [drivers.driver_number[int(d)] for d in input.driver()]\n            # assign team colour to driver or use default colour if team/team colour is none\n            selected_driver_colour = ['#' + str(drivers.team_colour[int(d)]) if drivers.team_colour[int(d)] is not None else default_driver_colour for d in input.driver()]\n\n            # if there are more than one driver and driver/team colour assigned are the same\n            # assigned driver colours to be default driver0 and driver1 colours\n            if len(input.driver()) > 1 and (selected_driver_colour[0]  ==  selected_driver_colour[1]):\n                selected_driver_colour = [default_driver0_colour, default_driver1_colour]\n\n            # get car_data and location_data\n            temp_car_data = []\n            temp_locations = []\n            for i, d in enumerate(selected_driver_number):\n                if old_selected_driver_number == [] or selected_driver_number[i] not in old_selected_driver_number:\n                    api_result_df = api_call('laps',['session_key=' + str(selected_session_key),'driver_number=' + str(selected_driver_number[i])])\n\n                    fastest_lap = get_fastest_lap(api_result_df)\n                    fastest_lap_start = get_lap_start_time(fastest_lap)\n                    fastest_lap_end = get_lap_end_time(fastest_lap)\n\n                    car_data_df = api_call('car_data',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                    car_data_df['date'] = pd.to_datetime(car_data_df.date, format = 'mixed') - pd.to_datetime(car_data_df.date,format = 'mixed').min()\n                    temp_car_data.append(car_data_df)\n\n                    locations_df = api_call('location',['driver_number=' + str(selected_driver_number[i]),'session_key=' + str(selected_session_key),'date>=' + str(fastest_lap_start),'date<=' + str(fastest_lap_end)])\n                    locations_df['date'] = pd.to_datetime(locations_df.date, format = 'mixed') - pd.to_datetime(locations_df.date,format = 'mixed').min()\n                    start_x = locations_df[locations_df.date  ==  locations_df.date.min()].x.iloc[0]\n                    start_y = locations_df[locations_df.date  ==  locations_df.date.min()].y.iloc[0]\n                    locations_df['x'] = locations_df.x - start_x\n                    locations_df['y'] = locations_df.y - start_y\n                    temp_locations.append(locations_df)\n                else:\n                    temp_car_data.append(car_data.copy()[old_selected_driver_number.index(selected_driver_number[i])])\n                    temp_locations.append(locations.copy()[old_selected_driver_number.index(selected_driver_number[i])])\n\n            car_data = temp_car_data.copy()\n            locations = temp_locations.copy()\n\n            # initialize colour attribute in locations[0] for track dominance plotting\n            # stored track dominance information only in locations[0] (driver0's location table) plotting\n            locations[0]['colour'] = selected_driver_colour[0]\n\n            # compare if there are two cars\n            if len(locations) > 1:\n                # map speed (car_data) to x, y position (location)\n                for j in range(len(locations)):\n                    locations[j] = map_car_data_attr_to_location_xy(locations[j],car_data[j], 'speed')\n                    '''locations[j]['speed'] = -1.0\n                    for i in range(locations[j].shape[0]):\n                        time = locations[j].iloc[i,:].date\n                        locations[j].loc[i,'speed'] = get_speed_from_car_data_datetime(car_data[j], time)'''\n\n                # determine track dominance\n                locations[0]['dominance'] = -99\n                for i in range(locations[0].shape[0]):\n                    x, y, speed = locations[0].iloc[i, :].x, locations[0].iloc[i, :].y, locations[0].iloc[i, :].speed\n                    locations[0].loc[i, 'dominance'] = calc_dominance(x, y, speed)\n\n                # smooth dominance result twice\n                smooth_dominance(smooth = 12)\n                smooth_dominance(smooth = 8)\n\n                # assign driver colour to locations on track to represent track dominance\n                for i in range(locations[0].shape[0]):\n                    dominance = locations[0].loc[i, 'dominance']\n                    if dominance  ==  0:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[0]\n                    elif dominance  ==  1:\n                        locations[0].loc[i, 'colour'] = selected_driver_colour[1]\n                    else:\n                        locations[0].loc[i, 'colour'] = '#00AAAA'\n\n        print(selected_meeting_key, selected_session_key)\n\n    # header elements\n    @render.text\n    def header() -> str:\n        if input.event():\n            event_name = get_event_name(int(input.event()))\n            return input.year() + ' ' + event_name if event_name !=  None else input.year()\n\n    @render.text\n    def sub_head() -> str:\n        if input.session():\n            session_name = get_session_name(int(input.session()))\n            return session_name if session_name !=  None else ''\n\n    @render.plot\n    def driver0() -> plt.figure:\n        if input.driver():\n            front_name, back_name = format_driver_names(int(input.driver()[0]))\n            return plot_names(front_name, back_name)\n\n    @render.plot\n    def driver1() -> plt.figure:\n        if len(input.driver())  ==  2:\n            front_name, back_name = format_driver_names(int(input.driver()[1]))\n            return plot_names(front_name, back_name)\n\n    # telemetry plot\n    @render_widget\n    @reactive.event(input.refresh, ignore_none = False)\n    def tele_plot() -> go.Figure:\n        fig = go.Figure()\n\n        if input.driver() !=  '':\n            plot_data = car_data.copy()\n\n            for i, data in enumerate(plot_data):\n                if i < 2:\n                    data['date'] = data.date.astype(str)\n                    data['date'] = data.date.str.extract(r'([0-9]{1}:[0-9]{2}.[0-9]{3})')\n                    data.sort_values('date', inplace = True)\n                    data['date'] = pd.to_datetime(data.date,format = '%M:%S.%f')\n                    data.dropna(inplace = True)\n\n                    dr_mask = drivers.driver_number  ==  selected_driver_number[i]\n\n                    time_str = str(data.date.max() - data.date.min())\n                    time_str = re.sub('[0-9]\\s(days)\\s','',time_str)\n                    time_str = re.sub('(?<= .[0-9]{3})0{2,3}$','',time_str)\n                    time_str = re.search('[0-9]{2}:[0-9]{2}.[0-9]{3}',time_str)\n                    time_str = time_str.group() if time_str is not None else ''\n\n                    fig.add_trace(go.Scatter(x = data.date, y = data.speed, line = (dict(color = str(selected_driver_colour[i]))) , name = list(drivers.loc[dr_mask, 'full_name'])[0] + ' ' + time_str))\n\n        fig.update_layout(\n            template = 'plotly_dark',\n            plot_bgcolor = 'black',\n            showlegend = True,\n            legend = dict(yanchor = 'bottom',y = 0.01,xanchor = 'right',x = 0.99,orientation = 'h'))\n        fig[\"layout\"].update({\"xaxis\": {\"tickformat\": \"%M:%S.%f\"}})\n        fig.update_yaxes(title_text = 'Speed / mph')\n        return fig\n\n    # driver metrics\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_throttle() -> plt.figure:\n        return driver_metric('throttle', 0, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_throttle() -> plt.figure:\n        return driver_metric('throttle', 1, pd.Series.mean, 0, 100, 'Throttle')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_brake() -> plt.figure:\n        return driver_metric('brake', 0, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_brake() -> plt.figure:\n        return driver_metric('brake', 1, pd.Series.mean, 0, 100, 'Brake')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver0_topspeed() -> plt.figure:\n        return driver_metric('speed', 0, pd.Series.max, 0, 350, 'Top speed')\n\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def driver1_topspeed() -> plt.figure:\n        return driver_metric('speed', 1, pd.Series.max, 0, 350, 'Top speed')\n\n    # track dominance\n    @render.plot\n    @reactive.event(input.refresh, ignore_none = False)\n    def track_dominance_plot() -> go.Figure:\n        global locations\n\n        fig, ax = plt.subplots()\n\n        if len(input.driver()) > 0 and len(locations) > 0:\n            plot_data = locations.copy()[0]\n\n            # draw driver0\n            ax.plot(plot_data.x + 50, plot_data.y - 250, c = text_colour, ls = '-', lw = 10, alpha = 0.15)\n            ax.plot(plot_data.x, plot_data.y, c = track_grey, ls = '-', lw = 6)\n            ax.plot(plot_data.x, plot_data.y, c = selected_driver_colour[0], ls = '-', lw = 4)\n\n            # work out segments for drawing driver1 dominant parts\n            if len(plot_data.colour.unique()) > 1:\n                current_segment = 0\n                plot_data['segment'] = -1\n                for i in range(plot_data.shape[0]):\n                    plot_data.loc[i, 'segment'] = current_segment\n                    if (i < plot_data.shape[0] - 1) and (plot_data.loc[i, 'dominance'] !=  plot_data.loc[i + 1, 'dominance']):\n                        current_segment  +=  1\n\n                # only draw driver1 dominant segments\n                plot_data_c = plot_data[plot_data.dominance  ==  1]\n                for seg in plot_data_c.segment.unique():\n                        plot_segment = plot_data_c[plot_data_c.segment  ==  seg]\n                        if plot_segment.shape[0] > 1:\n                            # ax.plot(plot_segment.x, plot_segment.y, c = tracker_border_colour_driver1, ls = '-', lw = 6)\n                            ax.plot(plot_segment.x, plot_segment.y, c = selected_driver_colour[1], ls = '-', lw = 4)\n\n            ax.plot(plot_data.x[0], plot_data.y[0], c = track_border_colour, marker = 'o', markersize = 8)\n            ax.plot(plot_data.x[0], plot_data.y[0], c = text_colour, marker = 'o', markersize = 6)\n\n        ax.axis('off')\n        ax.set_facecolor(main_bg_colour)\n\n        fig.patch.set_facecolor(main_bg_colour)\n        return fig\n    \n    @render.text\n    def ack() -> str:\n        return 'Credit to the open-sourced OpenF1.org API (https://openf1.org/) for the Formula One\u00ae telemetry data used in this dashboard'\n\n\napp = App(app_ui, server)\n", "type": "text"}]